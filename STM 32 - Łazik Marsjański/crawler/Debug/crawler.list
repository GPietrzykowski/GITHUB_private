
crawler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002c38  08002c38  00012c38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000240  2000000c  08002c9c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000024c  08002c9c  0002024c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018569  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002df6  00000000  00000000  000385a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009d0  00000000  00000000  0003b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000064c9  00000000  00000000  0003bd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003cd3  00000000  00000000  00042239  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00045f0c  2**0
                  CONTENTS, READONLY
 15 .debug_loc    00007589  00000000  00000000  00045f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e20  00000000  00000000  0004d518  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001c6c  00000000  00000000  0004e338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c20 	.word	0x08002c20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002c20 	.word	0x08002c20

080001c8 <ENK_Init>:
 *  Created on: 08.01.2019
 *      Author: natal
 */
#include "ENKPWM_libF3.h"

void ENK_Init(){
 80001c8:	b570      	push	{r4, r5, r6, lr}

	HAL_TIM_Base_Start(&htim2);
 80001ca:	4e14      	ldr	r6, [pc, #80]	; (800021c <ENK_Init+0x54>)
	HAL_TIM_Base_Start(&htim16);
 80001cc:	4d14      	ldr	r5, [pc, #80]	; (8000220 <ENK_Init+0x58>)
	HAL_TIM_Base_Start(&htim17);
 80001ce:	4c15      	ldr	r4, [pc, #84]	; (8000224 <ENK_Init+0x5c>)
	HAL_TIM_Base_Start(&htim2);
 80001d0:	4630      	mov	r0, r6
 80001d2:	f001 ff63 	bl	800209c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim16);
 80001d6:	4628      	mov	r0, r5
 80001d8:	f001 ff60 	bl	800209c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim17);
 80001dc:	4620      	mov	r0, r4
 80001de:	f001 ff5d 	bl	800209c <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80001e2:	2104      	movs	r1, #4
 80001e4:	4630      	mov	r0, r6
 80001e6:	f002 fb55 	bl	8002894 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 80001ea:	2100      	movs	r1, #0
 80001ec:	4628      	mov	r0, r5
 80001ee:	f002 fb51 	bl	8002894 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim17, TIM_CHANNEL_1);
 80001f2:	2100      	movs	r1, #0
 80001f4:	4620      	mov	r0, r4
 80001f6:	f002 fb4d 	bl	8002894 <HAL_TIM_IC_Start_IT>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80001fa:	6832      	ldr	r2, [r6, #0]
 80001fc:	68d3      	ldr	r3, [r2, #12]
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 8000204:	682a      	ldr	r2, [r5, #0]
 8000206:	68d3      	ldr	r3, [r2, #12]
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 800020e:	6822      	ldr	r2, [r4, #0]
 8000210:	68d3      	ldr	r3, [r2, #12]
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	60d3      	str	r3, [r2, #12]
 8000218:	bd70      	pop	{r4, r5, r6, pc}
 800021a:	bf00      	nop
 800021c:	2000011c 	.word	0x2000011c
 8000220:	2000015c 	.word	0x2000015c
 8000224:	200000c8 	.word	0x200000c8

08000228 <HAL_TIM_IC_CaptureCallback>:
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000228:	b538      	push	{r3, r4, r5, lr}

	 if (htim->Instance==TIM2)
 800022a:	6803      	ldr	r3, [r0, #0]
 800022c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8000230:	4604      	mov	r4, r0
	 if (htim->Instance==TIM2)
 8000232:	d113      	bne.n	800025c <HAL_TIM_IC_CaptureCallback+0x34>
	  {
		 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == SET)
 8000234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023c:	f001 fac4 	bl	80017c8 <HAL_GPIO_ReadPin>
 8000240:	2801      	cmp	r0, #1
 8000242:	4d2f      	ldr	r5, [pc, #188]	; (8000300 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000244:	d137      	bne.n	80002b6 <HAL_TIM_IC_CaptureCallback+0x8e>
		 {
			 abs_period_motor_1 = period_motor_1;
 8000246:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000248:	682a      	ldr	r2, [r5, #0]
 800024a:	601a      	str	r2, [r3, #0]
		 }
		 else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == RESET)
		 {
			 abs_period_motor_1 = - period_motor_1;
		 }
		 __HAL_TIM_SET_COUNTER(&htim2, 0);
 800024c:	482e      	ldr	r0, [pc, #184]	; (8000308 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800024e:	6803      	ldr	r3, [r0, #0]
 8000250:	2200      	movs	r2, #0
 8000252:	625a      	str	r2, [r3, #36]	; 0x24
		 period_motor_1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8000254:	2104      	movs	r1, #4
 8000256:	f001 ff2f 	bl	80020b8 <HAL_TIM_ReadCapturedValue>
 800025a:	6028      	str	r0, [r5, #0]

	  }

	 if (htim->Instance==TIM16)
 800025c:	6822      	ldr	r2, [r4, #0]
 800025e:	4b2b      	ldr	r3, [pc, #172]	; (800030c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000260:	429a      	cmp	r2, r3
 8000262:	d111      	bne.n	8000288 <HAL_TIM_IC_CaptureCallback+0x60>
		  {
			 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == SET)
 8000264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000268:	4829      	ldr	r0, [pc, #164]	; (8000310 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800026a:	4d2a      	ldr	r5, [pc, #168]	; (8000314 <HAL_TIM_IC_CaptureCallback+0xec>)
 800026c:	f001 faac 	bl	80017c8 <HAL_GPIO_ReadPin>
 8000270:	2801      	cmp	r0, #1
 8000272:	d12d      	bne.n	80002d0 <HAL_TIM_IC_CaptureCallback+0xa8>
			 {
				 abs_period_motor_2 = period_motor_2;
 8000274:	4b28      	ldr	r3, [pc, #160]	; (8000318 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000276:	682a      	ldr	r2, [r5, #0]
 8000278:	601a      	str	r2, [r3, #0]
			 }
			 else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == RESET)
			 {
				 abs_period_motor_2 = - period_motor_2;
			 }
			 __HAL_TIM_SET_COUNTER(&htim16, 0);
 800027a:	4828      	ldr	r0, [pc, #160]	; (800031c <HAL_TIM_IC_CaptureCallback+0xf4>)
 800027c:	6803      	ldr	r3, [r0, #0]
 800027e:	2100      	movs	r1, #0
 8000280:	6259      	str	r1, [r3, #36]	; 0x24
			 period_motor_2 = HAL_TIM_ReadCapturedValue(&htim16, TIM_CHANNEL_1);
 8000282:	f001 ff19 	bl	80020b8 <HAL_TIM_ReadCapturedValue>
 8000286:	6028      	str	r0, [r5, #0]

		  }

	 if (htim->Instance==TIM17)
 8000288:	6822      	ldr	r2, [r4, #0]
 800028a:	4b25      	ldr	r3, [pc, #148]	; (8000320 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800028c:	429a      	cmp	r2, r3
 800028e:	d111      	bne.n	80002b4 <HAL_TIM_IC_CaptureCallback+0x8c>
		  {
			 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == SET)
 8000290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000294:	481e      	ldr	r0, [pc, #120]	; (8000310 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000296:	4c23      	ldr	r4, [pc, #140]	; (8000324 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000298:	f001 fa96 	bl	80017c8 <HAL_GPIO_ReadPin>
 800029c:	2801      	cmp	r0, #1
 800029e:	d123      	bne.n	80002e8 <HAL_TIM_IC_CaptureCallback+0xc0>
			 {
				 abs_period_motor_3 = period_motor_3;
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <HAL_TIM_IC_CaptureCallback+0x100>)
 80002a2:	6822      	ldr	r2, [r4, #0]
 80002a4:	601a      	str	r2, [r3, #0]
			 }
			 else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == RESET)
			 {
				 abs_period_motor_3 = - period_motor_3;
			 }
			 __HAL_TIM_SET_COUNTER(&htim17, 0);
 80002a6:	4821      	ldr	r0, [pc, #132]	; (800032c <HAL_TIM_IC_CaptureCallback+0x104>)
 80002a8:	6803      	ldr	r3, [r0, #0]
 80002aa:	2100      	movs	r1, #0
 80002ac:	6259      	str	r1, [r3, #36]	; 0x24
			 period_motor_3 = HAL_TIM_ReadCapturedValue(&htim17, TIM_CHANNEL_1);
 80002ae:	f001 ff03 	bl	80020b8 <HAL_TIM_ReadCapturedValue>
 80002b2:	6020      	str	r0, [r4, #0]
 80002b4:	bd38      	pop	{r3, r4, r5, pc}
		 else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == RESET)
 80002b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002be:	f001 fa83 	bl	80017c8 <HAL_GPIO_ReadPin>
 80002c2:	2800      	cmp	r0, #0
 80002c4:	d1c2      	bne.n	800024c <HAL_TIM_IC_CaptureCallback+0x24>
			 abs_period_motor_1 = - period_motor_1;
 80002c6:	682b      	ldr	r3, [r5, #0]
 80002c8:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80002ca:	425b      	negs	r3, r3
 80002cc:	6013      	str	r3, [r2, #0]
 80002ce:	e7bd      	b.n	800024c <HAL_TIM_IC_CaptureCallback+0x24>
			 else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == RESET)
 80002d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d4:	480e      	ldr	r0, [pc, #56]	; (8000310 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80002d6:	f001 fa77 	bl	80017c8 <HAL_GPIO_ReadPin>
 80002da:	2800      	cmp	r0, #0
 80002dc:	d1cd      	bne.n	800027a <HAL_TIM_IC_CaptureCallback+0x52>
				 abs_period_motor_2 = - period_motor_2;
 80002de:	682b      	ldr	r3, [r5, #0]
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80002e2:	425b      	negs	r3, r3
 80002e4:	6013      	str	r3, [r2, #0]
 80002e6:	e7c8      	b.n	800027a <HAL_TIM_IC_CaptureCallback+0x52>
			 else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == RESET)
 80002e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ec:	4808      	ldr	r0, [pc, #32]	; (8000310 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80002ee:	f001 fa6b 	bl	80017c8 <HAL_GPIO_ReadPin>
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d1d7      	bne.n	80002a6 <HAL_TIM_IC_CaptureCallback+0x7e>
				 abs_period_motor_3 = - period_motor_3;
 80002f6:	6823      	ldr	r3, [r4, #0]
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <HAL_TIM_IC_CaptureCallback+0x100>)
 80002fa:	425b      	negs	r3, r3
 80002fc:	6013      	str	r3, [r2, #0]
 80002fe:	e7d2      	b.n	80002a6 <HAL_TIM_IC_CaptureCallback+0x7e>
 8000300:	200001a0 	.word	0x200001a0
 8000304:	20000110 	.word	0x20000110
 8000308:	2000011c 	.word	0x2000011c
 800030c:	40014400 	.word	0x40014400
 8000310:	48000800 	.word	0x48000800
 8000314:	20000114 	.word	0x20000114
 8000318:	200000c4 	.word	0x200000c4
 800031c:	2000015c 	.word	0x2000015c
 8000320:	40014800 	.word	0x40014800
 8000324:	2000019c 	.word	0x2000019c
 8000328:	2000010c 	.word	0x2000010c
 800032c:	200000c8 	.word	0x200000c8

08000330 <HAL_TIM_PeriodElapsedCallback>:
		  }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	 if (htim->Instance==TIM2)
 8000330:	6803      	ldr	r3, [r0, #0]
 8000332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000336:	d105      	bne.n	8000344 <HAL_TIM_PeriodElapsedCallback+0x14>
	  {
		 period_motor_1 = 0;
 8000338:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800033a:	2300      	movs	r3, #0
 800033c:	6013      	str	r3, [r2, #0]
		 abs_period_motor_1 = 0;
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x38>)
		 abs_period_motor_2 = 0;
	  }
	 if (htim->Instance==TIM17)
	  {
		 period_motor_3 = 0;
		 abs_period_motor_3 = 0;
 8000340:	6013      	str	r3, [r2, #0]
 8000342:	4770      	bx	lr
	 if (htim->Instance==TIM16)
 8000344:	4a09      	ldr	r2, [pc, #36]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d104      	bne.n	8000354 <HAL_TIM_PeriodElapsedCallback+0x24>
		 period_motor_2 = 0;
 800034a:	4a09      	ldr	r2, [pc, #36]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800034c:	2300      	movs	r3, #0
 800034e:	6013      	str	r3, [r2, #0]
		 abs_period_motor_2 = 0;
 8000350:	4a08      	ldr	r2, [pc, #32]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000352:	e7f5      	b.n	8000340 <HAL_TIM_PeriodElapsedCallback+0x10>
	 if (htim->Instance==TIM17)
 8000354:	4a08      	ldr	r2, [pc, #32]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d1f3      	bne.n	8000342 <HAL_TIM_PeriodElapsedCallback+0x12>
		 period_motor_3 = 0;
 800035a:	4a08      	ldr	r2, [pc, #32]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800035c:	2300      	movs	r3, #0
 800035e:	6013      	str	r3, [r2, #0]
		 abs_period_motor_3 = 0;
 8000360:	4a07      	ldr	r2, [pc, #28]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000362:	e7ed      	b.n	8000340 <HAL_TIM_PeriodElapsedCallback+0x10>
 8000364:	200001a0 	.word	0x200001a0
 8000368:	20000110 	.word	0x20000110
 800036c:	40014400 	.word	0x40014400
 8000370:	20000114 	.word	0x20000114
 8000374:	200000c4 	.word	0x200000c4
 8000378:	40014800 	.word	0x40014800
 800037c:	2000019c 	.word	0x2000019c
 8000380:	2000010c 	.word	0x2000010c

08000384 <frequency_ret>:
	  }
}
void frequency_ret(int32_t abs_period1,int32_t abs_period2, int32_t abs_period3){
 8000384:	b530      	push	{r4, r5, lr}
	int32_t pres = 10;
	int32_t freq = 8000000;
	f_obr_motor_1 = freq*50/(abs_period1*pres*64);
 8000386:	230a      	movs	r3, #10
 8000388:	4d09      	ldr	r5, [pc, #36]	; (80003b0 <frequency_ret+0x2c>)
 800038a:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <frequency_ret+0x30>)
 800038c:	4358      	muls	r0, r3
	f_obr_motor_2 = freq*50/(abs_period2*pres*64);
 800038e:	4359      	muls	r1, r3
	f_obr_motor_3 = freq*50/(abs_period3*pres*64);
 8000390:	435a      	muls	r2, r3
	f_obr_motor_1 = freq*50/(abs_period1*pres*64);
 8000392:	0180      	lsls	r0, r0, #6
	f_obr_motor_3 = freq*50/(abs_period3*pres*64);
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <frequency_ret+0x34>)
	f_obr_motor_1 = freq*50/(abs_period1*pres*64);
 8000396:	fb94 f0f0 	sdiv	r0, r4, r0
 800039a:	6028      	str	r0, [r5, #0]
	f_obr_motor_2 = freq*50/(abs_period2*pres*64);
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <frequency_ret+0x38>)
 800039e:	0189      	lsls	r1, r1, #6
	f_obr_motor_3 = freq*50/(abs_period3*pres*64);
 80003a0:	0192      	lsls	r2, r2, #6
	f_obr_motor_2 = freq*50/(abs_period2*pres*64);
 80003a2:	fb94 f1f1 	sdiv	r1, r4, r1
	f_obr_motor_3 = freq*50/(abs_period3*pres*64);
 80003a6:	fb94 f2f2 	sdiv	r2, r4, r2
	f_obr_motor_2 = freq*50/(abs_period2*pres*64);
 80003aa:	6001      	str	r1, [r0, #0]
	f_obr_motor_3 = freq*50/(abs_period3*pres*64);
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	20000118 	.word	0x20000118
 80003b4:	17d78400 	.word	0x17d78400
 80003b8:	200000c0 	.word	0x200000c0
 80003bc:	20000108 	.word	0x20000108

080003c0 <PWM_Init>:
#include <PWM_libF3.h>

void PWM_Init()
{
 80003c0:	b510      	push	{r4, lr}

	   HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80003c2:	4c0e      	ldr	r4, [pc, #56]	; (80003fc <PWM_Init+0x3c>)
 80003c4:	2100      	movs	r1, #0
 80003c6:	4620      	mov	r0, r4
 80003c8:	f002 fa42 	bl	8002850 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80003cc:	4620      	mov	r0, r4
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003ce:	4c0c      	ldr	r4, [pc, #48]	; (8000400 <PWM_Init+0x40>)
	   HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80003d0:	2104      	movs	r1, #4
 80003d2:	f002 fa3d 	bl	8002850 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003d6:	2100      	movs	r1, #0
 80003d8:	4620      	mov	r0, r4
 80003da:	f002 fa39 	bl	8002850 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003de:	2104      	movs	r1, #4
 80003e0:	4620      	mov	r0, r4
 80003e2:	f002 fa35 	bl	8002850 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80003e6:	2108      	movs	r1, #8
 80003e8:	4620      	mov	r0, r4
 80003ea:	f002 fa31 	bl	8002850 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80003ee:	4620      	mov	r0, r4
 80003f0:	210c      	movs	r1, #12
}
 80003f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80003f6:	f002 ba2b 	b.w	8002850 <HAL_TIM_PWM_Start>
 80003fa:	bf00      	nop
 80003fc:	200001a4 	.word	0x200001a4
 8000400:	200001e4 	.word	0x200001e4

08000404 <StartMotors>:

void StartMotors(){
 8000404:	b538      	push	{r3, r4, r5, lr}
	  	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 | GPIO_PIN_6, GPIO_PIN_RESET);
 8000406:	4d0e      	ldr	r5, [pc, #56]	; (8000440 <StartMotors+0x3c>)
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000408:	4c0e      	ldr	r4, [pc, #56]	; (8000444 <StartMotors+0x40>)
	  	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 | GPIO_PIN_6, GPIO_PIN_RESET);
 800040a:	4628      	mov	r0, r5
 800040c:	2200      	movs	r2, #0
 800040e:	f248 0140 	movw	r1, #32832	; 0x8040
 8000412:	f001 f9df 	bl	80017d4 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000416:	4620      	mov	r0, r4
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	f001 f9d9 	bl	80017d4 <HAL_GPIO_WritePin>

		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 | GPIO_PIN_7, GPIO_PIN_SET);
 8000422:	4628      	mov	r0, r5
 8000424:	2201      	movs	r2, #1
 8000426:	f248 0180 	movw	r1, #32896	; 0x8080
 800042a:	f001 f9d3 	bl	80017d4 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800042e:	4620      	mov	r0, r4
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 8000436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800043a:	f001 b9cb 	b.w	80017d4 <HAL_GPIO_WritePin>
 800043e:	bf00      	nop
 8000440:	48000800 	.word	0x48000800
 8000444:	48000400 	.word	0x48000400

08000448 <SetPWM>:

	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 | GPIO_PIN_7, GPIO_PIN_RESET);
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
}
void SetPWM(int16_t counter){
	if (counter>0)
 8000448:	2800      	cmp	r0, #0
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <SetPWM+0x2c>)
 800044c:	490a      	ldr	r1, [pc, #40]	; (8000478 <SetPWM+0x30>)
 800044e:	f04f 0200 	mov.w	r2, #0
 8000452:	dd06      	ble.n	8000462 <SetPWM+0x1a>
	{
		TIM1->CCR3 = counter;//motor3
 8000454:	63d8      	str	r0, [r3, #60]	; 0x3c
		TIM1->CCR4 = 0;
 8000456:	641a      	str	r2, [r3, #64]	; 0x40

		TIM1->CCR1 = counter;
 8000458:	6358      	str	r0, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;		//motor2
 800045a:	639a      	str	r2, [r3, #56]	; 0x38

		TIM15->CCR1 = counter;//motor1
 800045c:	6348      	str	r0, [r1, #52]	; 0x34
		TIM15->CCR2 = 0;
 800045e:	638a      	str	r2, [r1, #56]	; 0x38
 8000460:	4770      	bx	lr
	}
	else
	{
		TIM1->CCR3= 0;//motor3
		TIM1->CCR4 = -counter;
 8000462:	4240      	negs	r0, r0
		TIM1->CCR3= 0;//motor3
 8000464:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = -counter;
 8000466:	6418      	str	r0, [r3, #64]	; 0x40

		TIM1->CCR1 = 0;
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = -counter;	//motor2
 800046a:	6398      	str	r0, [r3, #56]	; 0x38

		TIM15->CCR1 = 0;//motor1
 800046c:	634a      	str	r2, [r1, #52]	; 0x34
		TIM15->CCR2 = -counter;
 800046e:	6388      	str	r0, [r1, #56]	; 0x38
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40012c00 	.word	0x40012c00
 8000478:	40014000 	.word	0x40014000

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b510      	push	{r4, lr}
 800047e:	b09c      	sub	sp, #112	; 0x70
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000480:	2302      	movs	r3, #2
 8000482:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000488:	2310      	movs	r3, #16
 800048a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800048e:	2300      	movs	r3, #0
 8000490:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	f001 f9a5 	bl	80017e0 <HAL_RCC_OscConfig>
 8000496:	4601      	mov	r1, r0
 8000498:	b100      	cbz	r0, 800049c <SystemClock_Config+0x20>
 800049a:	e7fe      	b.n	800049a <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800049e:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a8:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004aa:	f001 fc3d 	bl	8001d28 <HAL_RCC_ClockConfig>
 80004ae:	b100      	cbz	r0, 80004b2 <SystemClock_Config+0x36>
 80004b0:	e7fe      	b.n	80004b0 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <SystemClock_Config+0x74>)
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004b4:	9017      	str	r0, [sp, #92]	; 0x5c
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80004b6:	9018      	str	r0, [sp, #96]	; 0x60
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80004b8:	9019      	str	r0, [sp, #100]	; 0x64
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80004ba:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004bc:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
 80004be:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c0:	f001 fcfa 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 80004c4:	4604      	mov	r4, r0
 80004c6:	b100      	cbz	r0, 80004ca <SystemClock_Config+0x4e>
 80004c8:	e7fe      	b.n	80004c8 <SystemClock_Config+0x4c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004ca:	f001 fcef 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 80004ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d6:	f000 ffdb 	bl	8001490 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004da:	2004      	movs	r0, #4
 80004dc:	f000 ffee 	bl	80014bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004e0:	4622      	mov	r2, r4
 80004e2:	4621      	mov	r1, r4
 80004e4:	f04f 30ff 	mov.w	r0, #4294967295
 80004e8:	f000 ff92 	bl	8001410 <HAL_NVIC_SetPriority>
}
 80004ec:	b01c      	add	sp, #112	; 0x70
 80004ee:	bd10      	pop	{r4, pc}
 80004f0:	001c1000 	.word	0x001c1000

080004f4 <main>:
{
 80004f4:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	4c9a      	ldr	r4, [pc, #616]	; (8000760 <main+0x26c>)
{
 80004f8:	b09e      	sub	sp, #120	; 0x78
  HAL_Init();
 80004fa:	f000 fc11 	bl	8000d20 <HAL_Init>
  SystemClock_Config();
 80004fe:	f7ff ffbd 	bl	800047c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	6963      	ldr	r3, [r4, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000504:	4897      	ldr	r0, [pc, #604]	; (8000764 <main+0x270>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800050a:	6163      	str	r3, [r4, #20]
 800050c:	6963      	ldr	r3, [r4, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	6963      	ldr	r3, [r4, #20]
 8000518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800051c:	6163      	str	r3, [r4, #20]
 800051e:	6963      	ldr	r3, [r4, #20]
 8000520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000524:	9302      	str	r3, [sp, #8]
 8000526:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	6963      	ldr	r3, [r4, #20]
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6163      	str	r3, [r4, #20]
 8000530:	6963      	ldr	r3, [r4, #20]
 8000532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000536:	9303      	str	r3, [sp, #12]
 8000538:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	6963      	ldr	r3, [r4, #20]
 800053c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000540:	6163      	str	r3, [r4, #20]
 8000542:	6963      	ldr	r3, [r4, #20]
 8000544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000548:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f24c 01c0 	movw	r1, #49344	; 0xc0c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000552:	f001 f93f 	bl	80017d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800055c:	4882      	ldr	r0, [pc, #520]	; (8000768 <main+0x274>)

  /*Configure GPIO pins : PC14 PC15 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000560:	f001 f938 	bl	80017d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000566:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056a:	a913      	add	r1, sp, #76	; 0x4c
 800056c:	487d      	ldr	r0, [pc, #500]	; (8000764 <main+0x270>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 800056e:	9313      	str	r3, [sp, #76]	; 0x4c

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000570:	f44f 6640 	mov.w	r6, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057a:	f001 f86b 	bl	8001654 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	a913      	add	r1, sp, #76	; 0x4c
 8000580:	4879      	ldr	r0, [pc, #484]	; (8000768 <main+0x274>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000582:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	f001 f863 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800058e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	a913      	add	r1, sp, #76	; 0x4c
 8000594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000598:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059a:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f001 f859 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	a913      	add	r1, sp, #76	; 0x4c
 80005a4:	486f      	ldr	r0, [pc, #444]	; (8000764 <main+0x270>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80005a6:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a8:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ac:	f001 f852 	bl	8001654 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b0:	6963      	ldr	r3, [r4, #20]
 80005b2:	433b      	orrs	r3, r7
 80005b4:	6163      	str	r3, [r4, #20]
 80005b6:	6963      	ldr	r3, [r4, #20]
  htim1.Instance = TIM1;
 80005b8:	4c6c      	ldr	r4, [pc, #432]	; (800076c <main+0x278>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ba:	403b      	ands	r3, r7
 80005bc:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005be:	462a      	mov	r2, r5
 80005c0:	4629      	mov	r1, r5
 80005c2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c4:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005c6:	f000 ff23 	bl	8001410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005ca:	200b      	movs	r0, #11
 80005cc:	f000 ff54 	bl	8001478 <HAL_NVIC_EnableIRQ>
  htim1.Init.Prescaler = 2;
 80005d0:	4b67      	ldr	r3, [pc, #412]	; (8000770 <main+0x27c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d2:	60a5      	str	r5, [r4, #8]
  htim1.Init.Prescaler = 2;
 80005d4:	2702      	movs	r7, #2
  htim1.Init.Period = 1000;
 80005d6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005da:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 2;
 80005dc:	e884 0088 	stmia.w	r4, {r3, r7}
  htim1.Init.Period = 1000;
 80005e0:	60e6      	str	r6, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e2:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80005e4:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e6:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e8:	f001 fe7e 	bl	80022e8 <HAL_TIM_Base_Init>
 80005ec:	b100      	cbz	r0, 80005f0 <main+0xfc>
 80005ee:	e7fe      	b.n	80005ee <main+0xfa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	ad1e      	add	r5, sp, #120	; 0x78
 80005f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f6:	f845 3d58 	str.w	r3, [r5, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005fa:	4620      	mov	r0, r4
 80005fc:	4629      	mov	r1, r5
 80005fe:	f002 f865 	bl	80026cc <HAL_TIM_ConfigClockSource>
 8000602:	b100      	cbz	r0, 8000606 <main+0x112>
 8000604:	e7fe      	b.n	8000604 <main+0x110>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000606:	4620      	mov	r0, r4
 8000608:	f001 fe88 	bl	800231c <HAL_TIM_PWM_Init>
 800060c:	b100      	cbz	r0, 8000610 <main+0x11c>
 800060e:	e7fe      	b.n	800060e <main+0x11a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000610:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000612:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000614:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000616:	a905      	add	r1, sp, #20
 8000618:	4620      	mov	r0, r4
 800061a:	f002 fa4f 	bl	8002abc <HAL_TIMEx_MasterConfigSynchronization>
 800061e:	4602      	mov	r2, r0
 8000620:	b100      	cbz	r0, 8000624 <main+0x130>
 8000622:	e7fe      	b.n	8000622 <main+0x12e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000624:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8000626:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000628:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800062a:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800062c:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800062e:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000630:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000632:	a90c      	add	r1, sp, #48	; 0x30
 8000634:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000636:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000638:	f002 f9b8 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 800063c:	b100      	cbz	r0, 8000640 <main+0x14c>
 800063e:	e7fe      	b.n	800063e <main+0x14a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000640:	2204      	movs	r2, #4
 8000642:	a90c      	add	r1, sp, #48	; 0x30
 8000644:	4620      	mov	r0, r4
 8000646:	f002 f9b1 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 800064a:	b100      	cbz	r0, 800064e <main+0x15a>
 800064c:	e7fe      	b.n	800064c <main+0x158>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800064e:	2208      	movs	r2, #8
 8000650:	a90c      	add	r1, sp, #48	; 0x30
 8000652:	4620      	mov	r0, r4
 8000654:	f002 f9aa 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 8000658:	b100      	cbz	r0, 800065c <main+0x168>
 800065a:	e7fe      	b.n	800065a <main+0x166>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800065c:	220c      	movs	r2, #12
 800065e:	a90c      	add	r1, sp, #48	; 0x30
 8000660:	4620      	mov	r0, r4
 8000662:	f002 f9a3 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 8000666:	b100      	cbz	r0, 800066a <main+0x176>
 8000668:	e7fe      	b.n	8000668 <main+0x174>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800066e:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000670:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000672:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 8000674:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000676:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000678:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakFilter = 0;
 800067a:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800067c:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800067e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000682:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000684:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000686:	a913      	add	r1, sp, #76	; 0x4c
 8000688:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800068a:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800068c:	f002 fa38 	bl	8002b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8000690:	4680      	mov	r8, r0
 8000692:	b100      	cbz	r0, 8000696 <main+0x1a2>
 8000694:	e7fe      	b.n	8000694 <main+0x1a0>
  HAL_TIM_MspPostInit(&htim1);
 8000696:	4620      	mov	r0, r4
 8000698:	f000 fa7e 	bl	8000b98 <HAL_TIM_MspPostInit>
  htim15.Instance = TIM15;
 800069c:	4835      	ldr	r0, [pc, #212]	; (8000774 <main+0x280>)
 800069e:	4b36      	ldr	r3, [pc, #216]	; (8000778 <main+0x284>)
  htim15.Init.Period = 1000;
 80006a0:	60c6      	str	r6, [r0, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	e880 0188 	stmia.w	r0, {r3, r7, r8}
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a6:	f8c0 8010 	str.w	r8, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 80006aa:	f8c0 8014 	str.w	r8, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	f8c0 8018 	str.w	r8, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80006b2:	f001 fe33 	bl	800231c <HAL_TIM_PWM_Init>
 80006b6:	b100      	cbz	r0, 80006ba <main+0x1c6>
 80006b8:	e7fe      	b.n	80006b8 <main+0x1c4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80006bc:	4629      	mov	r1, r5
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <main+0x280>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80006c4:	f002 f9fa 	bl	8002abc <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4602      	mov	r2, r0
 80006ca:	b100      	cbz	r0, 80006ce <main+0x1da>
 80006cc:	e7fe      	b.n	80006cc <main+0x1d8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ce:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80006d0:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d2:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d4:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006d8:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006da:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006dc:	a90c      	add	r1, sp, #48	; 0x30
 80006de:	4825      	ldr	r0, [pc, #148]	; (8000774 <main+0x280>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e2:	f002 f963 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 80006e6:	b100      	cbz	r0, 80006ea <main+0x1f6>
 80006e8:	e7fe      	b.n	80006e8 <main+0x1f4>
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ea:	2204      	movs	r2, #4
 80006ec:	a90c      	add	r1, sp, #48	; 0x30
 80006ee:	4821      	ldr	r0, [pc, #132]	; (8000774 <main+0x280>)
 80006f0:	f002 f95c 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 80006f4:	b100      	cbz	r0, 80006f8 <main+0x204>
 80006f6:	e7fe      	b.n	80006f6 <main+0x202>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006f8:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fa:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006fc:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 80006fe:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000700:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000706:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000708:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800070a:	a913      	add	r1, sp, #76	; 0x4c
 800070c:	4819      	ldr	r0, [pc, #100]	; (8000774 <main+0x280>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070e:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000710:	f002 f9f6 	bl	8002b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8000714:	4606      	mov	r6, r0
 8000716:	b100      	cbz	r0, 800071a <main+0x226>
 8000718:	e7fe      	b.n	8000718 <main+0x224>
  htim2.Instance = TIM2;
 800071a:	4c18      	ldr	r4, [pc, #96]	; (800077c <main+0x288>)
  HAL_TIM_MspPostInit(&htim15);
 800071c:	4815      	ldr	r0, [pc, #84]	; (8000774 <main+0x280>)
 800071e:	f000 fa3b 	bl	8000b98 <HAL_TIM_MspPostInit>
  htim2.Init.Prescaler = 10;
 8000722:	f04f 080a 	mov.w	r8, #10
 8000726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Period = 0xFFFF;
 800072a:	f64f 77ff 	movw	r7, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072e:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 10;
 8000730:	e884 0108 	stmia.w	r4, {r3, r8}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	60a6      	str	r6, [r4, #8]
  htim2.Init.Period = 0xFFFF;
 8000736:	60e7      	str	r7, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000738:	6126      	str	r6, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800073c:	f001 fdd4 	bl	80022e8 <HAL_TIM_Base_Init>
 8000740:	b100      	cbz	r0, 8000744 <main+0x250>
 8000742:	e7fe      	b.n	8000742 <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000748:	a90c      	add	r1, sp, #48	; 0x30
 800074a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074e:	f001 ffbd 	bl	80026cc <HAL_TIM_ConfigClockSource>
 8000752:	b100      	cbz	r0, 8000756 <main+0x262>
 8000754:	e7fe      	b.n	8000754 <main+0x260>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000756:	4620      	mov	r0, r4
 8000758:	f001 fdfa 	bl	8002350 <HAL_TIM_IC_Init>
 800075c:	b180      	cbz	r0, 8000780 <main+0x28c>
 800075e:	e7fe      	b.n	800075e <main+0x26a>
 8000760:	40021000 	.word	0x40021000
 8000764:	48000800 	.word	0x48000800
 8000768:	48000400 	.word	0x48000400
 800076c:	200001e4 	.word	0x200001e4
 8000770:	40012c00 	.word	0x40012c00
 8000774:	200001a4 	.word	0x200001a4
 8000778:	40014000 	.word	0x40014000
 800077c:	2000011c 	.word	0x2000011c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	4629      	mov	r1, r5
 8000786:	4620      	mov	r0, r4
 8000788:	f002 f998 	bl	8002abc <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	b100      	cbz	r0, 8000790 <main+0x29c>
 800078e:	e7fe      	b.n	800078e <main+0x29a>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000790:	2301      	movs	r3, #1
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000792:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000794:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000796:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 15;
 8000798:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800079a:	2204      	movs	r2, #4
 800079c:	a913      	add	r1, sp, #76	; 0x4c
 800079e:	4620      	mov	r0, r4
  sConfigIC.ICFilter = 15;
 80007a0:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80007a2:	f001 ff01 	bl	80025a8 <HAL_TIM_IC_ConfigChannel>
 80007a6:	b100      	cbz	r0, 80007aa <main+0x2b6>
 80007a8:	e7fe      	b.n	80007a8 <main+0x2b4>
  htim16.Instance = TIM16;
 80007aa:	4b56      	ldr	r3, [pc, #344]	; (8000904 <main+0x410>)
 80007ac:	4a56      	ldr	r2, [pc, #344]	; (8000908 <main+0x414>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	6098      	str	r0, [r3, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	6118      	str	r0, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007b2:	6158      	str	r0, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007b6:	4618      	mov	r0, r3
  htim16.Init.Prescaler = 10;
 80007b8:	e883 0104 	stmia.w	r3, {r2, r8}
  htim16.Init.Period = 0xFFFF;
 80007bc:	60df      	str	r7, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007be:	f001 fd93 	bl	80022e8 <HAL_TIM_Base_Init>
 80007c2:	b100      	cbz	r0, 80007c6 <main+0x2d2>
 80007c4:	e7fe      	b.n	80007c4 <main+0x2d0>
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80007c6:	484f      	ldr	r0, [pc, #316]	; (8000904 <main+0x410>)
 80007c8:	f001 fdc2 	bl	8002350 <HAL_TIM_IC_Init>
 80007cc:	4602      	mov	r2, r0
 80007ce:	b100      	cbz	r0, 80007d2 <main+0x2de>
 80007d0:	e7fe      	b.n	80007d0 <main+0x2dc>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007d2:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007d4:	2501      	movs	r5, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007d6:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 80007d8:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007da:	a913      	add	r1, sp, #76	; 0x4c
 80007dc:	4849      	ldr	r0, [pc, #292]	; (8000904 <main+0x410>)
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007de:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007e0:	f001 fee2 	bl	80025a8 <HAL_TIM_IC_ConfigChannel>
 80007e4:	b100      	cbz	r0, 80007e8 <main+0x2f4>
 80007e6:	e7fe      	b.n	80007e6 <main+0x2f2>
  htim17.Instance = TIM17;
 80007e8:	4c48      	ldr	r4, [pc, #288]	; (800090c <main+0x418>)
  htim17.Init.Prescaler = 10;
 80007ea:	4b49      	ldr	r3, [pc, #292]	; (8000910 <main+0x41c>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	60a0      	str	r0, [r4, #8]
  htim17.Init.Prescaler = 10;
 80007ee:	260a      	movs	r6, #10
 80007f0:	e884 0048 	stmia.w	r4, {r3, r6}
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	6120      	str	r0, [r4, #16]
  htim17.Init.Period = 0xFFFF;
 80007f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim17.Init.RepetitionCounter = 0;
 80007fa:	6160      	str	r0, [r4, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007fe:	4620      	mov	r0, r4
  htim17.Init.Period = 0xFFFF;
 8000800:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000802:	f001 fd71 	bl	80022e8 <HAL_TIM_Base_Init>
 8000806:	b100      	cbz	r0, 800080a <main+0x316>
 8000808:	e7fe      	b.n	8000808 <main+0x314>
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800080a:	4620      	mov	r0, r4
 800080c:	f001 fda0 	bl	8002350 <HAL_TIM_IC_Init>
 8000810:	4602      	mov	r2, r0
 8000812:	b100      	cbz	r0, 8000816 <main+0x322>
 8000814:	e7fe      	b.n	8000814 <main+0x320>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000816:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000818:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 800081a:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800081c:	a913      	add	r1, sp, #76	; 0x4c
 800081e:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000820:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000822:	f001 fec1 	bl	80025a8 <HAL_TIM_IC_ConfigChannel>
 8000826:	b100      	cbz	r0, 800082a <main+0x336>
 8000828:	e7fe      	b.n	8000828 <main+0x334>
  hadc1.Instance = ADC1;
 800082a:	4c3a      	ldr	r4, [pc, #232]	; (8000914 <main+0x420>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800082c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000830:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000834:	e884 000c 	stmia.w	r4, {r2, r3}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000838:	60a0      	str	r0, [r4, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083a:	6260      	str	r0, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083c:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083e:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000840:	2306      	movs	r3, #6
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000842:	6360      	str	r0, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000844:	2704      	movs	r7, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000846:	61a0      	str	r0, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000848:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084a:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800084e:	61e5      	str	r5, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000850:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 6;
 8000852:	6223      	str	r3, [r4, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000854:	6167      	str	r7, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000856:	f000 fb1f 	bl	8000e98 <HAL_ADC_Init>
 800085a:	b100      	cbz	r0, 800085e <main+0x36a>
 800085c:	e7fe      	b.n	800085c <main+0x368>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	9015      	str	r0, [sp, #84]	; 0x54
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfig.Offset = 0;
 8000864:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	a913      	add	r1, sp, #76	; 0x4c
 8000868:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_10;
 800086a:	9613      	str	r6, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086c:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	f000 fc59 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000872:	b100      	cbz	r0, 8000876 <main+0x382>
 8000874:	e7fe      	b.n	8000874 <main+0x380>
  sConfig.Channel = ADC_CHANNEL_11;
 8000876:	230b      	movs	r3, #11
 8000878:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	a913      	add	r1, sp, #76	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800087c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000880:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	f000 fc4f 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000886:	b100      	cbz	r0, 800088a <main+0x396>
 8000888:	e7fe      	b.n	8000888 <main+0x394>
  sConfig.Channel = ADC_CHANNEL_12;
 800088a:	230c      	movs	r3, #12
 800088c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	a913      	add	r1, sp, #76	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000890:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000892:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000894:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	f000 fc45 	bl	8001124 <HAL_ADC_ConfigChannel>
 800089a:	b100      	cbz	r0, 800089e <main+0x3aa>
 800089c:	e7fe      	b.n	800089c <main+0x3a8>
  sConfig.Channel = ADC_CHANNEL_5;
 800089e:	2505      	movs	r5, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a0:	a913      	add	r1, sp, #76	; 0x4c
 80008a2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80008a4:	9513      	str	r5, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008a6:	9714      	str	r7, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a8:	f000 fc3c 	bl	8001124 <HAL_ADC_ConfigChannel>
 80008ac:	b100      	cbz	r0, 80008b0 <main+0x3bc>
 80008ae:	e7fe      	b.n	80008ae <main+0x3ba>
  sConfig.Channel = ADC_CHANNEL_6;
 80008b0:	2406      	movs	r4, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b2:	a913      	add	r1, sp, #76	; 0x4c
 80008b4:	4817      	ldr	r0, [pc, #92]	; (8000914 <main+0x420>)
  sConfig.Channel = ADC_CHANNEL_6;
 80008b6:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008b8:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	f000 fc33 	bl	8001124 <HAL_ADC_ConfigChannel>
 80008be:	b100      	cbz	r0, 80008c2 <main+0x3ce>
 80008c0:	e7fe      	b.n	80008c0 <main+0x3cc>
  sConfig.Channel = ADC_CHANNEL_13;
 80008c2:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c4:	a913      	add	r1, sp, #76	; 0x4c
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <main+0x420>)
  sConfig.Channel = ADC_CHANNEL_13;
 80008c8:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008ca:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008cc:	f000 fc2a 	bl	8001124 <HAL_ADC_ConfigChannel>
 80008d0:	b100      	cbz	r0, 80008d4 <main+0x3e0>
 80008d2:	e7fe      	b.n	80008d2 <main+0x3de>
  HAL_ADC_Start_DMA(&hadc1, DMA_Stream, 6);
 80008d4:	4622      	mov	r2, r4
 80008d6:	4910      	ldr	r1, [pc, #64]	; (8000918 <main+0x424>)
 80008d8:	480e      	ldr	r0, [pc, #56]	; (8000914 <main+0x420>)
	  frequency_ret(abs_period_motor_1, abs_period_motor_2, abs_period_motor_3);
 80008da:	4e10      	ldr	r6, [pc, #64]	; (800091c <main+0x428>)
 80008dc:	4d10      	ldr	r5, [pc, #64]	; (8000920 <main+0x42c>)
 80008de:	4c11      	ldr	r4, [pc, #68]	; (8000924 <main+0x430>)
  HAL_ADC_Start_DMA(&hadc1, DMA_Stream, 6);
 80008e0:	f000 fbc0 	bl	8001064 <HAL_ADC_Start_DMA>
  PWM_Init();
 80008e4:	f7ff fd6c 	bl	80003c0 <PWM_Init>
  ENK_Init();
 80008e8:	f7ff fc6e 	bl	80001c8 <ENK_Init>
  StartMotors();
 80008ec:	f7ff fd8a 	bl	8000404 <StartMotors>
  SetPWM(-300);
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <main+0x434>)
 80008f2:	f7ff fda9 	bl	8000448 <SetPWM>
	  frequency_ret(abs_period_motor_1, abs_period_motor_2, abs_period_motor_3);
 80008f6:	6830      	ldr	r0, [r6, #0]
 80008f8:	6829      	ldr	r1, [r5, #0]
 80008fa:	6822      	ldr	r2, [r4, #0]
 80008fc:	f7ff fd42 	bl	8000384 <frequency_ret>
 8000900:	e7f9      	b.n	80008f6 <main+0x402>
 8000902:	bf00      	nop
 8000904:	2000015c 	.word	0x2000015c
 8000908:	40014400 	.word	0x40014400
 800090c:	200000c8 	.word	0x200000c8
 8000910:	40014800 	.word	0x40014800
 8000914:	20000028 	.word	0x20000028
 8000918:	20000230 	.word	0x20000230
 800091c:	20000110 	.word	0x20000110
 8000920:	200000c4 	.word	0x200000c4
 8000924:	2000010c 	.word	0x2000010c
 8000928:	fffffed4 	.word	0xfffffed4

0800092c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800092c:	e7fe      	b.n	800092c <_Error_Handler>
	...

08000930 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <HAL_MspInit+0x78>)
{
 8000932:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000934:	699a      	ldr	r2, [r3, #24]
 8000936:	f042 0201 	orr.w	r2, r2, #1
 800093a:	619a      	str	r2, [r3, #24]
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	f000 fd50 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	4611      	mov	r1, r2
 8000950:	f06f 000b 	mvn.w	r0, #11
 8000954:	f000 fd5c 	bl	8001410 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	4611      	mov	r1, r2
 800095c:	f06f 000a 	mvn.w	r0, #10
 8000960:	f000 fd56 	bl	8001410 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	4611      	mov	r1, r2
 8000968:	f06f 0009 	mvn.w	r0, #9
 800096c:	f000 fd50 	bl	8001410 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	4611      	mov	r1, r2
 8000974:	f06f 0004 	mvn.w	r0, #4
 8000978:	f000 fd4a 	bl	8001410 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	4611      	mov	r1, r2
 8000980:	f06f 0003 	mvn.w	r0, #3
 8000984:	f000 fd44 	bl	8001410 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	4611      	mov	r1, r2
 800098c:	f06f 0001 	mvn.w	r0, #1
 8000990:	f000 fd3e 	bl	8001410 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	4611      	mov	r1, r2
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 fd38 	bl	8001410 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	b003      	add	sp, #12
 80009a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ac:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80009ae:	6803      	ldr	r3, [r0, #0]
 80009b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80009b4:	b086      	sub	sp, #24
 80009b6:	4606      	mov	r6, r0
  if(hadc->Instance==ADC1)
 80009b8:	d141      	bne.n	8000a3e <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ba:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80009be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PB1     ------> ADC1_IN12
    PB13     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2500      	movs	r5, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c4:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	481f      	ldr	r0, [pc, #124]	; (8000a44 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d8:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009da:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009de:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f000 fe36 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80009e8:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	a901      	add	r1, sp, #4
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80009f0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f2:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f000 fe2d 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80009fa:	f242 0303 	movw	r3, #8195	; 0x2003
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <HAL_ADC_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8000a00:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	9503      	str	r5, [sp, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a08:	4c10      	ldr	r4, [pc, #64]	; (8000a4c <HAL_ADC_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f000 fe23 	bl	8001654 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a10:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a12:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a20:	4620      	mov	r0, r4
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a26:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a28:	61a5      	str	r5, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a2a:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a2c:	f000 fd58 	bl	80014e0 <HAL_DMA_Init>
 8000a30:	b118      	cbz	r0, 8000a3a <HAL_ADC_MspInit+0x8e>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000a32:	2181      	movs	r1, #129	; 0x81
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <HAL_ADC_MspInit+0xa8>)
 8000a36:	f7ff ff79 	bl	800092c <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a3a:	63f4      	str	r4, [r6, #60]	; 0x3c
 8000a3c:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a3e:	b006      	add	sp, #24
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
 8000a42:	bf00      	nop
 8000a44:	48000800 	.word	0x48000800
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	2000007c 	.word	0x2000007c
 8000a50:	40020008 	.word	0x40020008
 8000a54:	08002c38 	.word	0x08002c38

08000a58 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a58:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8000a5a:	6803      	ldr	r3, [r0, #0]
 8000a5c:	4a3f      	ldr	r2, [pc, #252]	; (8000b5c <HAL_TIM_Base_MspInit+0x104>)
 8000a5e:	4293      	cmp	r3, r2
{
 8000a60:	b088      	sub	sp, #32
  if(htim_base->Instance==TIM1)
 8000a62:	d118      	bne.n	8000a96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a64:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <HAL_TIM_Base_MspInit+0x108>)
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a6c:	619a      	str	r2, [r3, #24]
 8000a6e:	699b      	ldr	r3, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a76:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a78:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a7a:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a7c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a7e:	f000 fcc7 	bl	8001410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a82:	2019      	movs	r0, #25
 8000a84:	f000 fcf8 	bl	8001478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a8a:	201a      	movs	r0, #26
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	f000 fcbf 	bl	8001410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a92:	201a      	movs	r0, #26
 8000a94:	e020      	b.n	8000ad8 <HAL_TIM_Base_MspInit+0x80>
  else if(htim_base->Instance==TIM2)
 8000a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a9a:	d121      	bne.n	8000ae0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2400      	movs	r4, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	482f      	ldr	r0, [pc, #188]	; (8000b64 <HAL_TIM_Base_MspInit+0x10c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa6:	f042 0201 	orr.w	r2, r2, #1
 8000aaa:	61da      	str	r2, [r3, #28]
 8000aac:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	9405      	str	r4, [sp, #20]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aba:	2308      	movs	r3, #8
 8000abc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f000 fdc4 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000acc:	201c      	movs	r0, #28
 8000ace:	4622      	mov	r2, r4
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	f000 fc9d 	bl	8001410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ad6:	201c      	movs	r0, #28
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ad8:	f000 fcce 	bl	8001478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000adc:	b008      	add	sp, #32
 8000ade:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM16)
 8000ae0:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <HAL_TIM_Base_MspInit+0x110>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d11d      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <HAL_TIM_Base_MspInit+0x108>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	481e      	ldr	r0, [pc, #120]	; (8000b64 <HAL_TIM_Base_MspInit+0x10c>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000aea:	699a      	ldr	r2, [r3, #24]
 8000aec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000af0:	619a      	str	r2, [r3, #24]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000afc:	2310      	movs	r3, #16
 8000afe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f000 fda0 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b14:	2019      	movs	r0, #25
 8000b16:	4622      	mov	r2, r4
 8000b18:	4621      	mov	r1, r4
 8000b1a:	f000 fc79 	bl	8001410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b1e:	2019      	movs	r0, #25
 8000b20:	e7da      	b.n	8000ad8 <HAL_TIM_Base_MspInit+0x80>
  else if(htim_base->Instance==TIM17)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <HAL_TIM_Base_MspInit+0x114>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d1d9      	bne.n	8000adc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_TIM_Base_MspInit+0x108>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	480e      	ldr	r0, [pc, #56]	; (8000b64 <HAL_TIM_Base_MspInit+0x10c>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b2c:	699a      	ldr	r2, [r3, #24]
 8000b2e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b32:	619a      	str	r2, [r3, #24]
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000b4a:	230a      	movs	r3, #10
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000b50:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f000 fd7f 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000b56:	4622      	mov	r2, r4
 8000b58:	e797      	b.n	8000a8a <HAL_TIM_Base_MspInit+0x32>
 8000b5a:	bf00      	nop
 8000b5c:	40012c00 	.word	0x40012c00
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000400 	.word	0x48000400
 8000b68:	40014400 	.word	0x40014400
 8000b6c:	40014800 	.word	0x40014800

08000b70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 8000b70:	6802      	ldr	r2, [r0, #0]
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_TIM_PWM_MspInit+0x24>)
 8000b74:	429a      	cmp	r2, r3
{
 8000b76:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 8000b78:	d10a      	bne.n	8000b90 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000b7a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8000b7e:	699a      	ldr	r2, [r3, #24]
 8000b80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b84:	619a      	str	r2, [r3, #24]
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000b90:	b002      	add	sp, #8
 8000b92:	4770      	bx	lr
 8000b94:	40014000 	.word	0x40014000

08000b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b98:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8000b9a:	6803      	ldr	r3, [r0, #0]
 8000b9c:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <HAL_TIM_MspPostInit+0x5c>)
 8000b9e:	4293      	cmp	r3, r2
{
 8000ba0:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8000ba2:	d11a      	bne.n	8000bda <HAL_TIM_MspPostInit+0x42>
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ba6:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000baa:	a901      	add	r1, sp, #4
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <HAL_TIM_MspPostInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000bb6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f000 fd4c 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bc8:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	a901      	add	r1, sp, #4
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8000bd0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f000 fd3f 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000bd6:	b007      	add	sp, #28
 8000bd8:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM15)
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_TIM_MspPostInit+0x64>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d1fa      	bne.n	8000bd6 <HAL_TIM_MspPostInit+0x3e>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000be0:	230c      	movs	r3, #12
 8000be2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8000bee:	2309      	movs	r3, #9
 8000bf0:	e7eb      	b.n	8000bca <HAL_TIM_MspPostInit+0x32>
 8000bf2:	bf00      	nop
 8000bf4:	40012c00 	.word	0x40012c00
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	40014000 	.word	0x40014000

08000c00 <NMI_Handler>:
 8000c00:	4770      	bx	lr

08000c02 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler>

08000c04 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler>

08000c06 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler>

08000c08 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler>

08000c0a <SVC_Handler>:
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000c10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c12:	f000 f897 	bl	8000d44 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000c1a:	f000 bc5c 	b.w	80014d6 <HAL_SYSTICK_IRQHandler>
	...

08000c20 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c20:	4801      	ldr	r0, [pc, #4]	; (8000c28 <DMA1_Channel1_IRQHandler+0x8>)
 8000c22:	f000 bcce 	b.w	80015c2 <HAL_DMA_IRQHandler>
 8000c26:	bf00      	nop
 8000c28:	2000007c 	.word	0x2000007c

08000c2c <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update and TIM16 interrupts.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000c30:	f001 fa68 	bl	8002104 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <TIM1_UP_TIM16_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 8000c3a:	f001 ba63 	b.w	8002104 <HAL_TIM_IRQHandler>
 8000c3e:	bf00      	nop
 8000c40:	200001e4 	.word	0x200001e4
 8000c44:	2000015c 	.word	0x2000015c

08000c48 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
* @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
*/
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000c4c:	f001 fa5a 	bl	8002104 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim17);
 8000c56:	f001 ba55 	b.w	8002104 <HAL_TIM_IRQHandler>
 8000c5a:	bf00      	nop
 8000c5c:	200001e4 	.word	0x200001e4
 8000c60:	200000c8 	.word	0x200000c8

08000c64 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c64:	4801      	ldr	r0, [pc, #4]	; (8000c6c <TIM2_IRQHandler+0x8>)
 8000c66:	f001 ba4d 	b.w	8002104 <HAL_TIM_IRQHandler>
 8000c6a:	bf00      	nop
 8000c6c:	2000011c 	.word	0x2000011c

08000c70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4915      	ldr	r1, [pc, #84]	; (8000cc8 <SystemInit+0x58>)
 8000c72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000c76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <SystemInit+0x5c>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000c88:	6858      	ldr	r0, [r3, #4]
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <SystemInit+0x60>)
 8000c8c:	4002      	ands	r2, r0
 8000c8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c9a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ca2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000caa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cae:	f022 020f 	bic.w	r2, r2, #15
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000cb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <SystemInit+0x64>)
 8000cb8:	4002      	ands	r2, r0
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc4:	608b      	str	r3, [r1, #8]
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	f87fc00c 	.word	0xf87fc00c
 8000cd4:	ff00fccc 	.word	0xff00fccc

08000cd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_InitTick+0x3c>)
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_InitTick+0x40>)
{
 8000cde:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	7818      	ldrb	r0, [r3, #0]
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cea:	6810      	ldr	r0, [r2, #0]
 8000cec:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cf0:	f000 fbce 	bl	8001490 <HAL_SYSTICK_Config>
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	b958      	cbnz	r0, 8000d10 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	2d0f      	cmp	r5, #15
 8000cfa:	d809      	bhi.n	8000d10 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4629      	mov	r1, r5
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 fb84 	bl	8001410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_InitTick+0x44>)
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	601d      	str	r5, [r3, #0]
 8000d0e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d10:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x20>)
{
 8000d22:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	6813      	ldr	r3, [r2, #0]
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 fb5d 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff ffd0 	bl	8000cd8 <HAL_InitTick>
  HAL_MspInit();
 8000d38:	f7ff fdfa 	bl	8000930 <HAL_MspInit>
}
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	bd08      	pop	{r3, pc}
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d44:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <HAL_IncTick+0x10>)
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_IncTick+0x14>)
 8000d48:	6811      	ldr	r1, [r2, #0]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	440b      	add	r3, r1
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000248 	.word	0x20000248
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <HAL_GetTick+0x8>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000248 	.word	0x20000248

08000d68 <HAL_ADC_ConvCpltCallback>:
 8000d68:	4770      	bx	lr

08000d6a <HAL_ADC_ConvHalfCpltCallback>:
 8000d6a:	4770      	bx	lr

08000d6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d6c:	4770      	bx	lr

08000d6e <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000d6e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000d70:	6803      	ldr	r3, [r0, #0]
{
 8000d72:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000d74:	6898      	ldr	r0, [r3, #8]
 8000d76:	f000 0003 	and.w	r0, r0, #3
 8000d7a:	2801      	cmp	r0, #1
 8000d7c:	d001      	beq.n	8000d82 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	07d2      	lsls	r2, r2, #31
 8000d86:	d5fa      	bpl.n	8000d7e <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	f002 020d 	and.w	r2, r2, #13
 8000d8e:	2a01      	cmp	r2, #1
 8000d90:	d11b      	bne.n	8000dca <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	f042 0202 	orr.w	r2, r2, #2
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000d9e:	f7ff ffdd 	bl	8000d5c <HAL_GetTick>
 8000da2:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	07db      	lsls	r3, r3, #31
 8000daa:	d5e8      	bpl.n	8000d7e <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000dac:	f7ff ffd6 	bl	8000d5c <HAL_GetTick>
 8000db0:	1b40      	subs	r0, r0, r5
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f6      	bls.n	8000da4 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000db6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000dda:	bd38      	pop	{r3, r4, r5, pc}

08000ddc <ADC_Enable>:
{
 8000ddc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dde:	6803      	ldr	r3, [r0, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	f002 0203 	and.w	r2, r2, #3
 8000de6:	2a01      	cmp	r2, #1
{
 8000de8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dea:	d104      	bne.n	8000df6 <ADC_Enable+0x1a>
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	07d2      	lsls	r2, r2, #31
 8000df0:	d501      	bpl.n	8000df6 <ADC_Enable+0x1a>
  return HAL_OK;
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000df6:	6899      	ldr	r1, [r3, #8]
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <ADC_Enable+0x58>)
 8000dfa:	4211      	tst	r1, r2
 8000dfc:	d10f      	bne.n	8000e1e <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	f042 0201 	orr.w	r2, r2, #1
 8000e04:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8000e06:	f7ff ffa9 	bl	8000d5c <HAL_GetTick>
 8000e0a:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	07db      	lsls	r3, r3, #31
 8000e12:	d4ee      	bmi.n	8000df2 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e14:	f7ff ffa2 	bl	8000d5c <HAL_GetTick>
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9f6      	bls.n	8000e0c <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000e2e:	2001      	movs	r0, #1
 8000e30:	bd38      	pop	{r3, r4, r5, pc}
 8000e32:	bf00      	nop
 8000e34:	8000003f 	.word	0x8000003f

08000e38 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e38:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000e3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e40:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000e42:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8000e4a:	f7ff bf8f 	b.w	8000d6c <HAL_ADC_ErrorCallback>

08000e4e <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000e4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000e50:	f7ff bf8b 	b.w	8000d6a <HAL_ADC_ConvHalfCpltCallback>

08000e54 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e54:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e58:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000e5c:	d118      	bne.n	8000e90 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e64:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68d2      	ldr	r2, [r2, #12]
 8000e6a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000e6e:	d10c      	bne.n	8000e8a <ADC_DMAConvCplt+0x36>
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	b952      	cbnz	r2, 8000e8a <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e7a:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e7e:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e80:	bf5e      	ittt	pl
 8000e82:	6c5a      	ldrpl	r2, [r3, #68]	; 0x44
 8000e84:	f042 0201 	orrpl.w	r2, r2, #1
 8000e88:	645a      	strpl	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff bf6c 	b.w	8000d68 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4718      	bx	r3
	...

08000e98 <HAL_ADC_Init>:
{
 8000e98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	f000 80cc 	beq.w	800103e <HAL_ADC_Init+0x1a6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ea6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000ea8:	06d2      	lsls	r2, r2, #27
 8000eaa:	f100 80b5 	bmi.w	8001018 <HAL_ADC_Init+0x180>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000eae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d07b      	beq.n	8000fac <HAL_ADC_Init+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	00d5      	lsls	r5, r2, #3
 8000ebc:	d502      	bpl.n	8000ec4 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ebe:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ec0:	0099      	lsls	r1, r3, #2
 8000ec2:	d50a      	bpl.n	8000eda <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 8000ec4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ec6:	f023 0312 	bic.w	r3, r3, #18
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000edc:	06da      	lsls	r2, r3, #27
 8000ede:	f100 80a8 	bmi.w	8001032 <HAL_ADC_Init+0x19a>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	f040 80a5 	bne.w	8001032 <HAL_ADC_Init+0x19a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	6891      	ldr	r1, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000eec:	f011 0104 	ands.w	r1, r1, #4
 8000ef0:	f040 809f 	bne.w	8001032 <HAL_ADC_Init+0x19a>
    ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ef6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	6463      	str	r3, [r4, #68]	; 0x44
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f00:	6893      	ldr	r3, [r2, #8]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	f040 809b 	bne.w	8001042 <HAL_ADC_Init+0x1aa>
 8000f0c:	6813      	ldr	r3, [r2, #0]
 8000f0e:	07db      	lsls	r3, r3, #31
 8000f10:	f140 8097 	bpl.w	8001042 <HAL_ADC_Init+0x1aa>
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000f14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f16:	68a6      	ldr	r6, [r4, #8]
 8000f18:	69e5      	ldr	r5, [r4, #28]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	68e3      	ldr	r3, [r4, #12]
 8000f1e:	ea43 0306 	orr.w	r3, r3, r6
 8000f22:	bf18      	it	ne
 8000f24:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8000f28:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
 8000f2c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f30:	2901      	cmp	r1, #1
 8000f32:	d107      	bne.n	8000f44 <HAL_ADC_Init+0xac>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d171      	bne.n	800101c <HAL_ADC_Init+0x184>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000f3a:	3901      	subs	r1, #1
 8000f3c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f46:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f48:	bf1e      	ittt	ne
 8000f4a:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 8000f4c:	4329      	orrne	r1, r5
 8000f4e:	430b      	orrne	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f50:	6891      	ldr	r1, [r2, #8]
 8000f52:	f011 0f0c 	tst.w	r1, #12
 8000f56:	d10b      	bne.n	8000f70 <HAL_ADC_Init+0xd8>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f58:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000f5a:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f5c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000f60:	f021 0102 	bic.w	r1, r1, #2
 8000f64:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000f66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f68:	0049      	lsls	r1, r1, #1
 8000f6a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8000f6e:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8000f70:	68d5      	ldr	r5, [r2, #12]
 8000f72:	4938      	ldr	r1, [pc, #224]	; (8001054 <HAL_ADC_Init+0x1bc>)
 8000f74:	4029      	ands	r1, r5
 8000f76:	430b      	orrs	r3, r1
 8000f78:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	2b01      	cmp	r3, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f7e:	bf05      	ittet	eq
 8000f80:	6b11      	ldreq	r1, [r2, #48]	; 0x30
 8000f82:	6a23      	ldreq	r3, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f84:	6b13      	ldrne	r3, [r2, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f86:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000f8a:	bf06      	itte	eq
 8000f8c:	f021 010f 	biceq.w	r1, r1, #15
 8000f90:	430b      	orreq	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f92:	f023 030f 	bicne.w	r3, r3, #15
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f9e:	f023 0303 	bic.w	r3, r3, #3
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8000fac:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000fae:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000fb0:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000fb2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000fb6:	f7ff fcf9 	bl	80009ac <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	f53f af78 	bmi.w	8000eb4 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f7ff fed2 	bl	8000d6e <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fcc:	06d6      	lsls	r6, r2, #27
 8000fce:	f53f af72 	bmi.w	8000eb6 <HAL_ADC_Init+0x1e>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	f47f af6f 	bne.w	8000eb6 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fde:	f023 0302 	bic.w	r3, r3, #2
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ff0:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ff8:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_ADC_Init+0x1c0>)
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <HAL_ADC_Init+0x1c4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	fbb3 f2f2 	udiv	r2, r3, r2
 8001004:	230a      	movs	r3, #10
 8001006:	4353      	muls	r3, r2
            wait_loop_index--;
 8001008:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800100a:	9b01      	ldr	r3, [sp, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	f43f af51 	beq.w	8000eb4 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	3b01      	subs	r3, #1
 8001016:	e7f7      	b.n	8001008 <HAL_ADC_Init+0x170>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	4618      	mov	r0, r3
 800101a:	e75e      	b.n	8000eda <HAL_ADC_Init+0x42>
        ADC_STATE_CLR_SET(hadc->State,
 800101c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800101e:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8001022:	f041 0120 	orr.w	r1, r1, #32
 8001026:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800102a:	f041 0101 	orr.w	r1, r1, #1
 800102e:	64a1      	str	r1, [r4, #72]	; 0x48
 8001030:	e788      	b.n	8000f44 <HAL_ADC_Init+0xac>
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001034:	f023 0312 	bic.w	r3, r3, #18
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
 8001040:	e7b2      	b.n	8000fa8 <HAL_ADC_Init+0x110>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001042:	4d07      	ldr	r5, [pc, #28]	; (8001060 <HAL_ADC_Init+0x1c8>)
 8001044:	6866      	ldr	r6, [r4, #4]
 8001046:	68ab      	ldr	r3, [r5, #8]
 8001048:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800104c:	4333      	orrs	r3, r6
 800104e:	60ab      	str	r3, [r5, #8]
 8001050:	e760      	b.n	8000f14 <HAL_ADC_Init+0x7c>
 8001052:	bf00      	nop
 8001054:	fff0c007 	.word	0xfff0c007
 8001058:	20000000 	.word	0x20000000
 800105c:	000f4240 	.word	0x000f4240
 8001060:	50000300 	.word	0x50000300

08001064 <HAL_ADC_Start_DMA>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001064:	6803      	ldr	r3, [r0, #0]
{
 8001066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800106a:	689d      	ldr	r5, [r3, #8]
 800106c:	f015 0504 	ands.w	r5, r5, #4
{
 8001070:	4604      	mov	r4, r0
 8001072:	460f      	mov	r7, r1
 8001074:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001076:	d14d      	bne.n	8001114 <HAL_ADC_Start_DMA+0xb0>
    __HAL_LOCK(hadc);
 8001078:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800107c:	2b01      	cmp	r3, #1
 800107e:	d049      	beq.n	8001114 <HAL_ADC_Start_DMA+0xb0>
 8001080:	2301      	movs	r3, #1
 8001082:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      tmp_hal_status = ADC_Enable(hadc);
 8001086:	f7ff fea9 	bl	8000ddc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800108a:	4606      	mov	r6, r0
 800108c:	2800      	cmp	r0, #0
 800108e:	d13e      	bne.n	800110e <HAL_ADC_Start_DMA+0xaa>
        ADC_STATE_CLR_SET(hadc->State,
 8001090:	6c60      	ldr	r0, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001092:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001094:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8001098:	f020 0001 	bic.w	r0, r0, #1
 800109c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80010a0:	6460      	str	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010a8:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010aa:	68cb      	ldr	r3, [r1, #12]
 80010ac:	019b      	lsls	r3, r3, #6
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ae:	bf41      	itttt	mi
 80010b0:	6c60      	ldrmi	r0, [r4, #68]	; 0x44
 80010b2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80010b6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80010ba:	6460      	strmi	r0, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010c4:	bf1c      	itt	ne
 80010c6:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 80010c8:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 80010ce:	2300      	movs	r3, #0
 80010d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_ADC_Start_DMA+0xb4>)
 80010d6:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_ADC_Start_DMA+0xb8>)
 80010da:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_ADC_Start_DMA+0xbc>)
 80010de:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010e0:	231c      	movs	r3, #28
 80010e2:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010e4:	684b      	ldr	r3, [r1, #4]
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80010ec:	68cb      	ldr	r3, [r1, #12]
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010f4:	463a      	mov	r2, r7
 80010f6:	4643      	mov	r3, r8
 80010f8:	3140      	adds	r1, #64	; 0x40
 80010fa:	f000 fa25 	bl	8001548 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010fe:	6822      	ldr	r2, [r4, #0]
 8001100:	6893      	ldr	r3, [r2, #8]
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6093      	str	r3, [r2, #8]
}
 8001108:	4630      	mov	r0, r6
 800110a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800110e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 8001112:	e7f9      	b.n	8001108 <HAL_ADC_Start_DMA+0xa4>
    tmp_hal_status = HAL_BUSY;
 8001114:	2602      	movs	r6, #2
 8001116:	e7f7      	b.n	8001108 <HAL_ADC_Start_DMA+0xa4>
 8001118:	08000e55 	.word	0x08000e55
 800111c:	08000e4f 	.word	0x08000e4f
 8001120:	08000e39 	.word	0x08000e39

08001124 <HAL_ADC_ConfigChannel>:
{
 8001124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800112a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800112e:	2b01      	cmp	r3, #1
{
 8001130:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001132:	f000 8139 	beq.w	80013a8 <HAL_ADC_ConfigChannel+0x284>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001136:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001138:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800113a:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800113c:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800113e:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 8001140:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001144:	f100 812b 	bmi.w	800139e <HAL_ADC_ConfigChannel+0x27a>
    if (sConfig->Rank < 5U)
 8001148:	6848      	ldr	r0, [r1, #4]
 800114a:	680c      	ldr	r4, [r1, #0]
 800114c:	2804      	cmp	r0, #4
 800114e:	f04f 0206 	mov.w	r2, #6
 8001152:	d831      	bhi.n	80011b8 <HAL_ADC_ConfigChannel+0x94>
      MODIFY_REG(hadc->Instance->SQR1,
 8001154:	4342      	muls	r2, r0
 8001156:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001158:	201f      	movs	r0, #31
 800115a:	4090      	lsls	r0, r2
 800115c:	ea27 0000 	bic.w	r0, r7, r0
 8001160:	fa04 f202 	lsl.w	r2, r4, r2
 8001164:	4302      	orrs	r2, r0
 8001166:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	f012 0f0c 	tst.w	r2, #12
 800116e:	d162      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x112>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001170:	2c09      	cmp	r4, #9
 8001172:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8001176:	688f      	ldr	r7, [r1, #8]
 8001178:	d946      	bls.n	8001208 <HAL_ADC_ConfigChannel+0xe4>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800117a:	4422      	add	r2, r4
 800117c:	6998      	ldr	r0, [r3, #24]
 800117e:	3a1e      	subs	r2, #30
 8001180:	f04f 0e07 	mov.w	lr, #7
 8001184:	fa0e fe02 	lsl.w	lr, lr, r2
 8001188:	ea20 000e 	bic.w	r0, r0, lr
 800118c:	fa07 f202 	lsl.w	r2, r7, r2
 8001190:	4302      	orrs	r2, r0
 8001192:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 800119a:	694a      	ldr	r2, [r1, #20]
 800119c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80011a0:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 80011a4:	690a      	ldr	r2, [r1, #16]
 80011a6:	3a01      	subs	r2, #1
 80011a8:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 80011ac:	2a03      	cmp	r2, #3
 80011ae:	d873      	bhi.n	8001298 <HAL_ADC_ConfigChannel+0x174>
 80011b0:	e8df f002 	tbb	[pc, r2]
 80011b4:	675c5137 	.word	0x675c5137
    else if (sConfig->Rank < 10U)
 80011b8:	2809      	cmp	r0, #9
 80011ba:	d80b      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0xb0>
      MODIFY_REG(hadc->Instance->SQR2,
 80011bc:	4342      	muls	r2, r0
 80011be:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80011c0:	3a1e      	subs	r2, #30
 80011c2:	201f      	movs	r0, #31
 80011c4:	4090      	lsls	r0, r2
 80011c6:	ea27 0000 	bic.w	r0, r7, r0
 80011ca:	fa04 f202 	lsl.w	r2, r4, r2
 80011ce:	4302      	orrs	r2, r0
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
 80011d2:	e7c9      	b.n	8001168 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80011d4:	280e      	cmp	r0, #14
 80011d6:	d80b      	bhi.n	80011f0 <HAL_ADC_ConfigChannel+0xcc>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80011d8:	4342      	muls	r2, r0
 80011da:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80011dc:	3a3c      	subs	r2, #60	; 0x3c
 80011de:	201f      	movs	r0, #31
 80011e0:	4090      	lsls	r0, r2
 80011e2:	ea27 0000 	bic.w	r0, r7, r0
 80011e6:	fa04 f202 	lsl.w	r2, r4, r2
 80011ea:	4302      	orrs	r2, r0
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38
 80011ee:	e7bb      	b.n	8001168 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011f0:	4342      	muls	r2, r0
 80011f2:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80011f4:	3a5a      	subs	r2, #90	; 0x5a
 80011f6:	201f      	movs	r0, #31
 80011f8:	4090      	lsls	r0, r2
 80011fa:	ea27 0000 	bic.w	r0, r7, r0
 80011fe:	fa04 f202 	lsl.w	r2, r4, r2
 8001202:	4302      	orrs	r2, r0
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c
 8001206:	e7af      	b.n	8001168 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001208:	6958      	ldr	r0, [r3, #20]
 800120a:	4422      	add	r2, r4
 800120c:	f04f 0e07 	mov.w	lr, #7
 8001210:	fa0e fe02 	lsl.w	lr, lr, r2
 8001214:	ea20 000e 	bic.w	r0, r0, lr
 8001218:	fa07 f202 	lsl.w	r2, r7, r2
 800121c:	4302      	orrs	r2, r0
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	e7b8      	b.n	8001194 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001224:	4f6d      	ldr	r7, [pc, #436]	; (80013dc <HAL_ADC_ConfigChannel+0x2b8>)
 8001226:	4017      	ands	r7, r2
 8001228:	ea47 020c 	orr.w	r2, r7, ip
 800122c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001230:	ea42 020e 	orr.w	r2, r2, lr
 8001234:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	2a01      	cmp	r2, #1
 800123e:	f040 80b5 	bne.w	80013ac <HAL_ADC_ConfigChannel+0x288>
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	07d0      	lsls	r0, r2, #31
 8001246:	f140 80b1 	bpl.w	80013ac <HAL_ADC_ConfigChannel+0x288>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800124c:	2300      	movs	r3, #0
 800124e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8001252:	b003      	add	sp, #12
 8001254:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001256:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001258:	4f60      	ldr	r7, [pc, #384]	; (80013dc <HAL_ADC_ConfigChannel+0x2b8>)
 800125a:	4017      	ands	r7, r2
 800125c:	ea47 020c 	orr.w	r2, r7, ip
 8001260:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001264:	ea42 020e 	orr.w	r2, r2, lr
 8001268:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800126a:	e7e4      	b.n	8001236 <HAL_ADC_ConfigChannel+0x112>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800126c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800126e:	485b      	ldr	r0, [pc, #364]	; (80013dc <HAL_ADC_ConfigChannel+0x2b8>)
 8001270:	4010      	ands	r0, r2
 8001272:	ea40 020c 	orr.w	r2, r0, ip
 8001276:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800127a:	ea42 020e 	orr.w	r2, r2, lr
 800127e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8001280:	e7d9      	b.n	8001236 <HAL_ADC_ConfigChannel+0x112>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001282:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001284:	4a55      	ldr	r2, [pc, #340]	; (80013dc <HAL_ADC_ConfigChannel+0x2b8>)
 8001286:	4002      	ands	r2, r0
 8001288:	ea42 020c 	orr.w	r2, r2, ip
 800128c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001290:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001294:	66da      	str	r2, [r3, #108]	; 0x6c
 8001296:	e7ce      	b.n	8001236 <HAL_ADC_ConfigChannel+0x112>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800129a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800129e:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012a0:	bf02      	ittt	eq
 80012a2:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80012a4:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80012a8:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012ac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80012b0:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80012b2:	bf02      	ittt	eq
 80012b4:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 80012b6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80012ba:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012be:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80012c2:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80012c4:	bf02      	ittt	eq
 80012c6:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 80012c8:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80012cc:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012d0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80012d4:	4594      	cmp	ip, r2
 80012d6:	d1ae      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x112>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80012d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012de:	e7d9      	b.n	8001294 <HAL_ADC_ConfigChannel+0x170>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012e4:	2101      	movs	r1, #1
 80012e6:	40a1      	lsls	r1, r4
 80012e8:	ea22 0201 	bic.w	r2, r2, r1
 80012ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012f0:	2c10      	cmp	r4, #16
 80012f2:	d131      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x234>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012f4:	4a3a      	ldr	r2, [pc, #232]	; (80013e0 <HAL_ADC_ConfigChannel+0x2bc>)
 80012f6:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012f8:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012fc:	d1a5      	bne.n	800124a <HAL_ADC_ConfigChannel+0x126>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012fe:	6898      	ldr	r0, [r3, #8]
 8001300:	f000 0003 	and.w	r0, r0, #3
 8001304:	2801      	cmp	r0, #1
 8001306:	d102      	bne.n	800130e <HAL_ADC_ConfigChannel+0x1ea>
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	07d2      	lsls	r2, r2, #31
 800130c:	d447      	bmi.n	800139e <HAL_ADC_ConfigChannel+0x27a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800130e:	2c10      	cmp	r4, #16
 8001310:	d131      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x252>
 8001312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001316:	d198      	bne.n	800124a <HAL_ADC_ConfigChannel+0x126>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001318:	4a31      	ldr	r2, [pc, #196]	; (80013e0 <HAL_ADC_ConfigChannel+0x2bc>)
 800131a:	6893      	ldr	r3, [r2, #8]
 800131c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001320:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_ADC_ConfigChannel+0x2c0>)
 8001324:	4a30      	ldr	r2, [pc, #192]	; (80013e8 <HAL_ADC_ConfigChannel+0x2c4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	fbb3 f2f2 	udiv	r2, r3, r2
 800132c:	230a      	movs	r3, #10
 800132e:	4353      	muls	r3, r2
            wait_loop_index--;
 8001330:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d088      	beq.n	800124a <HAL_ADC_ConfigChannel+0x126>
            wait_loop_index--;
 8001338:	9b01      	ldr	r3, [sp, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	e7f8      	b.n	8001330 <HAL_ADC_ConfigChannel+0x20c>
        MODIFY_REG(hadc->Instance->SMPR1,
 800133e:	1c60      	adds	r0, r4, #1
 8001340:	6959      	ldr	r1, [r3, #20]
 8001342:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001346:	2207      	movs	r2, #7
 8001348:	4082      	lsls	r2, r0
 800134a:	ea21 0102 	bic.w	r1, r1, r2
 800134e:	fa06 f200 	lsl.w	r2, r6, r0
 8001352:	430a      	orrs	r2, r1
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	e7cb      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001358:	2c11      	cmp	r4, #17
 800135a:	d104      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x242>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_ADC_ConfigChannel+0x2bc>)
 800135e:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001360:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001364:	e7ca      	b.n	80012fc <HAL_ADC_ConfigChannel+0x1d8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001366:	2c12      	cmp	r4, #18
 8001368:	f47f af6f 	bne.w	800124a <HAL_ADC_ConfigChannel+0x126>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800136c:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <HAL_ADC_ConfigChannel+0x2bc>)
 800136e:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001370:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001374:	e7c2      	b.n	80012fc <HAL_ADC_ConfigChannel+0x1d8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001376:	2c11      	cmp	r4, #17
 8001378:	d109      	bne.n	800138e <HAL_ADC_ConfigChannel+0x26a>
 800137a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137e:	f47f af64 	bne.w	800124a <HAL_ADC_ConfigChannel+0x126>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_ADC_ConfigChannel+0x2bc>)
 8001384:	6893      	ldr	r3, [r2, #8]
 8001386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800138a:	6093      	str	r3, [r2, #8]
 800138c:	e75d      	b.n	800124a <HAL_ADC_ConfigChannel+0x126>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800138e:	2c12      	cmp	r4, #18
 8001390:	f47f af5b 	bne.w	800124a <HAL_ADC_ConfigChannel+0x126>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001394:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <HAL_ADC_ConfigChannel+0x2bc>)
 8001396:	6893      	ldr	r3, [r2, #8]
 8001398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800139c:	e7f5      	b.n	800138a <HAL_ADC_ConfigChannel+0x266>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800139e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	646b      	str	r3, [r5, #68]	; 0x44
 80013a6:	e751      	b.n	800124c <HAL_ADC_ConfigChannel+0x128>
  __HAL_LOCK(hadc);
 80013a8:	2002      	movs	r0, #2
 80013aa:	e752      	b.n	8001252 <HAL_ADC_ConfigChannel+0x12e>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013ac:	2e01      	cmp	r6, #1
 80013ae:	d197      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1bc>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013b4:	40a6      	lsls	r6, r4
 80013b6:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013b8:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013ba:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 80013be:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013c0:	d9bd      	bls.n	800133e <HAL_ADC_ConfigChannel+0x21a>
        MODIFY_REG(hadc->Instance->SMPR2,
 80013c2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80013c6:	6999      	ldr	r1, [r3, #24]
 80013c8:	3a1b      	subs	r2, #27
 80013ca:	2007      	movs	r0, #7
 80013cc:	4090      	lsls	r0, r2
 80013ce:	ea21 0100 	bic.w	r1, r1, r0
 80013d2:	fa06 f202 	lsl.w	r2, r6, r2
 80013d6:	430a      	orrs	r2, r1
 80013d8:	619a      	str	r2, [r3, #24]
 80013da:	e789      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x1cc>
 80013dc:	83fff000 	.word	0x83fff000
 80013e0:	50000300 	.word	0x50000300
 80013e4:	20000000 	.word	0x20000000
 80013e8:	000f4240 	.word	0x000f4240

080013ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f4:	041b      	lsls	r3, r3, #16
 80013f6:	0c1b      	lsrs	r3, r3, #16
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80013fc:	0200      	lsls	r0, r0, #8
 80013fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001402:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001406:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001408:	60d3      	str	r3, [r2, #12]
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001412:	b530      	push	{r4, r5, lr}
 8001414:	68dc      	ldr	r4, [r3, #12]
 8001416:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	2b04      	cmp	r3, #4
 8001422:	bf28      	it	cs
 8001424:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 0501 	mov.w	r5, #1
 800142c:	fa05 f303 	lsl.w	r3, r5, r3
 8001430:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001434:	bf8c      	ite	hi
 8001436:	3c03      	subhi	r4, #3
 8001438:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143a:	4019      	ands	r1, r3
 800143c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143e:	fa05 f404 	lsl.w	r4, r5, r4
 8001442:	3c01      	subs	r4, #1
 8001444:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001446:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	ea42 0201 	orr.w	r2, r2, r1
 800144c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	bfaf      	iteee	ge
 8001452:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	f000 000f 	andlt.w	r0, r0, #15
 800145a:	4b06      	ldrlt	r3, [pc, #24]	; (8001474 <HAL_NVIC_SetPriority+0x64>)
 800145c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	bfa5      	ittet	ge
 8001460:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001464:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800146c:	bd30      	pop	{r4, r5, pc}
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	e000ed14 	.word	0xe000ed14

08001478 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001478:	0942      	lsrs	r2, r0, #5
 800147a:	2301      	movs	r3, #1
 800147c:	f000 001f 	and.w	r0, r0, #31
 8001480:	fa03 f000 	lsl.w	r0, r3, r0
 8001484:	4b01      	ldr	r3, [pc, #4]	; (800148c <HAL_NVIC_EnableIRQ+0x14>)
 8001486:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	3801      	subs	r0, #1
 8001492:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001496:	d20a      	bcs.n	80014ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	21f0      	movs	r1, #240	; 0xf0
 80014a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014be:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014c0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014c2:	bf0c      	ite	eq
 80014c4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014c8:	f022 0204 	bicne.w	r2, r2, #4
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	4770      	bx	lr
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014d4:	4770      	bx	lr

080014d6 <HAL_SYSTICK_IRQHandler>:
{
 80014d6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80014d8:	f7ff fffc 	bl	80014d4 <HAL_SYSTICK_Callback>
 80014dc:	bd08      	pop	{r3, pc}
	...

080014e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80014e0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80014e2:	b350      	cbz	r0, 800153a <HAL_DMA_Init+0x5a>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014e4:	6884      	ldr	r4, [r0, #8]
 80014e6:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80014e8:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80014ea:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ec:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80014ee:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f0:	4323      	orrs	r3, r4
 80014f2:	6904      	ldr	r4, [r0, #16]
 80014f4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	6944      	ldr	r4, [r0, #20]
 80014f8:	4323      	orrs	r3, r4
 80014fa:	6984      	ldr	r4, [r0, #24]
 80014fc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fe:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001500:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001504:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8001508:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800150a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800150c:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_DMA_Init+0x60>)
 8001510:	2214      	movs	r2, #20
 8001512:	440b      	add	r3, r1
 8001514:	fbb3 f3f2 	udiv	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_DMA_Init+0x64>)
 800151e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001520:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001522:	2300      	movs	r3, #0
 8001524:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001526:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001528:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800152a:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152c:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800152e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001532:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8001536:	4618      	mov	r0, r3
 8001538:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800153a:	2001      	movs	r0, #1
}  
 800153c:	bd10      	pop	{r4, pc}
 800153e:	bf00      	nop
 8001540:	bffdfff8 	.word	0xbffdfff8
 8001544:	40020000 	.word	0x40020000

08001548 <HAL_DMA_Start_IT>:
{
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800154a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800154e:	2c01      	cmp	r4, #1
 8001550:	d035      	beq.n	80015be <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001552:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001556:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001558:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800155a:	f880 4020 	strb.w	r4, [r0, #32]
 800155e:	f04f 0600 	mov.w	r6, #0
 8001562:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8001566:	d128      	bne.n	80015ba <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001568:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800156c:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156e:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001570:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001572:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001574:	f026 0601 	bic.w	r6, r6, #1
 8001578:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800157a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800157c:	40bd      	lsls	r5, r7
 800157e:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8001580:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001582:	6843      	ldr	r3, [r0, #4]
 8001584:	6805      	ldr	r5, [r0, #0]
 8001586:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001588:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 800158a:	bf0b      	itete	eq
 800158c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800158e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001590:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001592:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001594:	b14b      	cbz	r3, 80015aa <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800159c:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2000      	movs	r0, #0
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	f043 030a 	orr.w	r3, r3, #10
 80015b0:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	e7f0      	b.n	800159c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80015ba:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80015be:	2002      	movs	r0, #2
} 
 80015c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015c2 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80015c6:	6803      	ldr	r3, [r0, #0]
{
 80015c8:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015ca:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80015cc:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015ce:	2404      	movs	r4, #4
 80015d0:	4094      	lsls	r4, r2
 80015d2:	4226      	tst	r6, r4
 80015d4:	d00e      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x32>
 80015d6:	f015 0f04 	tst.w	r5, #4
 80015da:	d00b      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80015e0:	bf5e      	ittt	pl
 80015e2:	681a      	ldrpl	r2, [r3, #0]
 80015e4:	f022 0204 	bicpl.w	r2, r2, #4
 80015e8:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80015ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80015ec:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80015ee:	b373      	cbz	r3, 800164e <HAL_DMA_IRQHandler+0x8c>
}  
 80015f0:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80015f2:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80015f4:	2402      	movs	r4, #2
 80015f6:	4094      	lsls	r4, r2
 80015f8:	4226      	tst	r6, r4
 80015fa:	d012      	beq.n	8001622 <HAL_DMA_IRQHandler+0x60>
 80015fc:	f015 0f02 	tst.w	r5, #2
 8001600:	d00f      	beq.n	8001622 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	0695      	lsls	r5, r2, #26
 8001606:	d406      	bmi.n	8001616 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f022 020a 	bic.w	r2, r2, #10
 800160e:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001610:	2301      	movs	r3, #1
 8001612:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8001616:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001618:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 800161a:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800161e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001620:	e7e5      	b.n	80015ee <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001622:	2408      	movs	r4, #8
 8001624:	4094      	lsls	r4, r2
 8001626:	4234      	tst	r4, r6
 8001628:	d011      	beq.n	800164e <HAL_DMA_IRQHandler+0x8c>
 800162a:	072c      	lsls	r4, r5, #28
 800162c:	d50f      	bpl.n	800164e <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800162e:	681c      	ldr	r4, [r3, #0]
 8001630:	f024 040e 	bic.w	r4, r4, #14
 8001634:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001636:	2301      	movs	r3, #1
 8001638:	fa03 f202 	lsl.w	r2, r3, r2
 800163c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800163e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001640:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001644:	2300      	movs	r3, #0
 8001646:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800164a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800164c:	e7cf      	b.n	80015ee <HAL_DMA_IRQHandler+0x2c>
}  
 800164e:	bc70      	pop	{r4, r5, r6}
 8001650:	4770      	bx	lr
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001658:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800165a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80017c4 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001660:	4a56      	ldr	r2, [pc, #344]	; (80017bc <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001662:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001664:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8001668:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800166a:	9c01      	ldr	r4, [sp, #4]
 800166c:	40dc      	lsrs	r4, r3
 800166e:	d102      	bne.n	8001676 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8001670:	b005      	add	sp, #20
 8001672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001676:	2401      	movs	r4, #1
 8001678:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800167c:	9c01      	ldr	r4, [sp, #4]
 800167e:	ea14 050a 	ands.w	r5, r4, sl
 8001682:	f000 8093 	beq.w	80017ac <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001686:	684c      	ldr	r4, [r1, #4]
 8001688:	f024 0b10 	bic.w	fp, r4, #16
 800168c:	f1bb 0f02 	cmp.w	fp, #2
 8001690:	d111      	bne.n	80016b6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001692:	08df      	lsrs	r7, r3, #3
 8001694:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001698:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800169c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80016a2:	fa09 fc0e 	lsl.w	ip, r9, lr
 80016a6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016aa:	690e      	ldr	r6, [r1, #16]
 80016ac:	fa06 f60e 	lsl.w	r6, r6, lr
 80016b0:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80016b4:	623e      	str	r6, [r7, #32]
 80016b6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ba:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80016bc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	fa07 f70c 	lsl.w	r7, r7, ip
 80016c2:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ca:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ce:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d2:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d6:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80016da:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016dc:	d811      	bhi.n	8001702 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80016de:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e0:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e4:	68ce      	ldr	r6, [r1, #12]
 80016e6:	fa06 fe0c 	lsl.w	lr, r6, ip
 80016ea:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80016ee:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80016f0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f2:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016f6:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80016fa:	409e      	lsls	r6, r3
 80016fc:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001700:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001702:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001704:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001706:	688e      	ldr	r6, [r1, #8]
 8001708:	fa06 f60c 	lsl.w	r6, r6, ip
 800170c:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170e:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001710:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001712:	d54b      	bpl.n	80017ac <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001714:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001718:	f046 0601 	orr.w	r6, r6, #1
 800171c:	f8c8 6018 	str.w	r6, [r8, #24]
 8001720:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001724:	f023 0703 	bic.w	r7, r3, #3
 8001728:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800172c:	f006 0601 	and.w	r6, r6, #1
 8001730:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001734:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001736:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800173c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800173e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001742:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001746:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800174a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800174e:	d02f      	beq.n	80017b0 <HAL_GPIO_Init+0x15c>
 8001750:	4e1b      	ldr	r6, [pc, #108]	; (80017c0 <HAL_GPIO_Init+0x16c>)
 8001752:	42b0      	cmp	r0, r6
 8001754:	d02e      	beq.n	80017b4 <HAL_GPIO_Init+0x160>
 8001756:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800175a:	42b0      	cmp	r0, r6
 800175c:	d02c      	beq.n	80017b8 <HAL_GPIO_Init+0x164>
 800175e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001762:	42b0      	cmp	r0, r6
 8001764:	bf14      	ite	ne
 8001766:	2605      	movne	r6, #5
 8001768:	2603      	moveq	r6, #3
 800176a:	fa06 f60e 	lsl.w	r6, r6, lr
 800176e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001772:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001774:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001776:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001778:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800177c:	bf0c      	ite	eq
 800177e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001780:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001782:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001784:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001786:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800178a:	bf0c      	ite	eq
 800178c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800178e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001790:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001792:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001794:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001798:	bf0c      	ite	eq
 800179a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800179c:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800179e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80017a0:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80017a4:	bf54      	ite	pl
 80017a6:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80017a8:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80017aa:	60d6      	str	r6, [r2, #12]
    position++;
 80017ac:	3301      	adds	r3, #1
 80017ae:	e75c      	b.n	800166a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017b0:	2600      	movs	r6, #0
 80017b2:	e7da      	b.n	800176a <HAL_GPIO_Init+0x116>
 80017b4:	2601      	movs	r6, #1
 80017b6:	e7d8      	b.n	800176a <HAL_GPIO_Init+0x116>
 80017b8:	2602      	movs	r6, #2
 80017ba:	e7d6      	b.n	800176a <HAL_GPIO_Init+0x116>
 80017bc:	40010400 	.word	0x40010400
 80017c0:	48000400 	.word	0x48000400
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017c8:	6903      	ldr	r3, [r0, #16]
 80017ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80017cc:	bf14      	ite	ne
 80017ce:	2001      	movne	r0, #1
 80017d0:	2000      	moveq	r0, #0
 80017d2:	4770      	bx	lr

080017d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	b10a      	cbz	r2, 80017da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d6:	6181      	str	r1, [r0, #24]
 80017d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017da:	6281      	str	r1, [r0, #40]	; 0x28
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e0:	6803      	ldr	r3, [r0, #0]
 80017e2:	07da      	lsls	r2, r3, #31
{
 80017e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80017e8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	d411      	bmi.n	8001810 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ec:	682b      	ldr	r3, [r5, #0]
 80017ee:	079b      	lsls	r3, r3, #30
 80017f0:	f100 8088 	bmi.w	8001904 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	071c      	lsls	r4, r3, #28
 80017f8:	f100 80f8 	bmi.w	80019ec <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	0758      	lsls	r0, r3, #29
 8001800:	f100 8141 	bmi.w	8001a86 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	69ea      	ldr	r2, [r5, #28]
 8001806:	2a00      	cmp	r2, #0
 8001808:	f040 81d7 	bne.w	8001bba <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800180c:	2000      	movs	r0, #0
 800180e:	e021      	b.n	8001854 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001810:	4cba      	ldr	r4, [pc, #744]	; (8001afc <HAL_RCC_OscConfig+0x31c>)
 8001812:	6863      	ldr	r3, [r4, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d007      	beq.n	800182c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b08      	cmp	r3, #8
 8001824:	d119      	bne.n	800185a <HAL_RCC_OscConfig+0x7a>
 8001826:	6863      	ldr	r3, [r4, #4]
 8001828:	03df      	lsls	r7, r3, #15
 800182a:	d516      	bpl.n	800185a <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001830:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	6821      	ldr	r1, [r4, #0]
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	2201      	movs	r2, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	420b      	tst	r3, r1
 800184a:	d0cf      	beq.n	80017ec <HAL_RCC_OscConfig+0xc>
 800184c:	686b      	ldr	r3, [r5, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1cc      	bne.n	80017ec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001852:	2001      	movs	r0, #1
}
 8001854:	b002      	add	sp, #8
 8001856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	686a      	ldr	r2, [r5, #4]
 800185c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001860:	d125      	bne.n	80018ae <HAL_RCC_OscConfig+0xce>
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800186a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800186c:	68a9      	ldr	r1, [r5, #8]
 800186e:	f023 030f 	bic.w	r3, r3, #15
 8001872:	430b      	orrs	r3, r1
 8001874:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001876:	b352      	cbz	r2, 80018ce <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8001878:	f7ff fa70 	bl	8000d5c <HAL_GetTick>
 800187c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001880:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	2701      	movs	r7, #1
 8001884:	fa96 f3a6 	rbit	r3, r6
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	fa96 f3a6 	rbit	r3, r6
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	fa07 f303 	lsl.w	r3, r7, r3
 800189a:	4213      	tst	r3, r2
 800189c:	d1a6      	bne.n	80017ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189e:	f7ff fa5d 	bl	8000d5c <HAL_GetTick>
 80018a2:	eba0 0008 	sub.w	r0, r0, r8
 80018a6:	2864      	cmp	r0, #100	; 0x64
 80018a8:	d9ec      	bls.n	8001884 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 80018aa:	2003      	movs	r0, #3
 80018ac:	e7d2      	b.n	8001854 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	b932      	cbnz	r2, 80018c0 <HAL_RCC_OscConfig+0xe0>
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b6:	6023      	str	r3, [r4, #0]
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	e7d3      	b.n	8001868 <HAL_RCC_OscConfig+0x88>
 80018c0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80018c4:	d1f5      	bne.n	80018b2 <HAL_RCC_OscConfig+0xd2>
 80018c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ca:	6023      	str	r3, [r4, #0]
 80018cc:	e7c9      	b.n	8001862 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80018ce:	f7ff fa45 	bl	8000d5c <HAL_GetTick>
 80018d2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80018d6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d8:	2701      	movs	r7, #1
 80018da:	fa96 f3a6 	rbit	r3, r6
 80018de:	6822      	ldr	r2, [r4, #0]
 80018e0:	fa96 f3a6 	rbit	r3, r6
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	fa07 f303 	lsl.w	r3, r7, r3
 80018f0:	4213      	tst	r3, r2
 80018f2:	f43f af7b 	beq.w	80017ec <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f6:	f7ff fa31 	bl	8000d5c <HAL_GetTick>
 80018fa:	eba0 0008 	sub.w	r0, r0, r8
 80018fe:	2864      	cmp	r0, #100	; 0x64
 8001900:	d9eb      	bls.n	80018da <HAL_RCC_OscConfig+0xfa>
 8001902:	e7d2      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001904:	4c7d      	ldr	r4, [pc, #500]	; (8001afc <HAL_RCC_OscConfig+0x31c>)
 8001906:	6863      	ldr	r3, [r4, #4]
 8001908:	f013 0f0c 	tst.w	r3, #12
 800190c:	d007      	beq.n	800191e <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800190e:	6863      	ldr	r3, [r4, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d121      	bne.n	800195c <HAL_RCC_OscConfig+0x17c>
 8001918:	6863      	ldr	r3, [r4, #4]
 800191a:	03de      	lsls	r6, r3, #15
 800191c:	d41e      	bmi.n	800195c <HAL_RCC_OscConfig+0x17c>
 800191e:	2302      	movs	r3, #2
 8001920:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001924:	6821      	ldr	r1, [r4, #0]
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2201      	movs	r2, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	420b      	tst	r3, r1
 800193a:	d002      	beq.n	8001942 <HAL_RCC_OscConfig+0x162>
 800193c:	692b      	ldr	r3, [r5, #16]
 800193e:	4293      	cmp	r3, r2
 8001940:	d187      	bne.n	8001852 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001942:	6821      	ldr	r1, [r4, #0]
 8001944:	23f8      	movs	r3, #248	; 0xf8
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	fab3 f283 	clz	r2, r3
 800194e:	696b      	ldr	r3, [r5, #20]
 8001950:	4093      	lsls	r3, r2
 8001952:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001956:	4313      	orrs	r3, r2
 8001958:	6023      	str	r3, [r4, #0]
 800195a:	e74b      	b.n	80017f4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800195c:	692a      	ldr	r2, [r5, #16]
 800195e:	2601      	movs	r6, #1
 8001960:	b30a      	cbz	r2, 80019a6 <HAL_RCC_OscConfig+0x1c6>
 8001962:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800196e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	2702      	movs	r7, #2
 8001976:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001978:	f7ff f9f0 	bl	8000d5c <HAL_GetTick>
 800197c:	4680      	mov	r8, r0
 800197e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	6822      	ldr	r2, [r4, #0]
 8001984:	fa97 f3a7 	rbit	r3, r7
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa06 f303 	lsl.w	r3, r6, r3
 8001994:	4213      	tst	r3, r2
 8001996:	d1d4      	bne.n	8001942 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff f9e0 	bl	8000d5c <HAL_GetTick>
 800199c:	eba0 0008 	sub.w	r0, r0, r8
 80019a0:	2802      	cmp	r0, #2
 80019a2:	d9ec      	bls.n	800197e <HAL_RCC_OscConfig+0x19e>
 80019a4:	e781      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
 80019a6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	2702      	movs	r7, #2
 80019ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019bc:	f7ff f9ce 	bl	8000d5c <HAL_GetTick>
 80019c0:	4680      	mov	r8, r0
 80019c2:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	fa97 f3a7 	rbit	r3, r7
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	fa06 f303 	lsl.w	r3, r6, r3
 80019d8:	4213      	tst	r3, r2
 80019da:	f43f af0b 	beq.w	80017f4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff f9bd 	bl	8000d5c <HAL_GetTick>
 80019e2:	eba0 0008 	sub.w	r0, r0, r8
 80019e6:	2802      	cmp	r0, #2
 80019e8:	d9eb      	bls.n	80019c2 <HAL_RCC_OscConfig+0x1e2>
 80019ea:	e75e      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ec:	69aa      	ldr	r2, [r5, #24]
 80019ee:	4e43      	ldr	r6, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x31c>)
 80019f0:	4943      	ldr	r1, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0x320>)
 80019f2:	2401      	movs	r4, #1
 80019f4:	b31a      	cbz	r2, 8001a3e <HAL_RCC_OscConfig+0x25e>
 80019f6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	440b      	add	r3, r1
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	2702      	movs	r7, #2
 8001a04:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001a06:	f7ff f9a9 	bl	8000d5c <HAL_GetTick>
 8001a0a:	4680      	mov	r8, r0
 8001a0c:	fa97 f3a7 	rbit	r3, r7
 8001a10:	fa97 f3a7 	rbit	r3, r7
 8001a14:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a18:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001a1a:	fa97 f3a7 	rbit	r3, r7
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	fa04 f303 	lsl.w	r3, r4, r3
 8001a2a:	4213      	tst	r3, r2
 8001a2c:	f47f aee6 	bne.w	80017fc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff f994 	bl	8000d5c <HAL_GetTick>
 8001a34:	eba0 0008 	sub.w	r0, r0, r8
 8001a38:	2802      	cmp	r0, #2
 8001a3a:	d9e7      	bls.n	8001a0c <HAL_RCC_OscConfig+0x22c>
 8001a3c:	e735      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
 8001a3e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	440b      	add	r3, r1
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	2702      	movs	r7, #2
 8001a4c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a4e:	f7ff f985 	bl	8000d5c <HAL_GetTick>
 8001a52:	4680      	mov	r8, r0
 8001a54:	fa97 f3a7 	rbit	r3, r7
 8001a58:	fa97 f3a7 	rbit	r3, r7
 8001a5c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001a62:	fa97 f3a7 	rbit	r3, r7
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	fa04 f303 	lsl.w	r3, r4, r3
 8001a72:	4213      	tst	r3, r2
 8001a74:	f43f aec2 	beq.w	80017fc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff f970 	bl	8000d5c <HAL_GetTick>
 8001a7c:	eba0 0008 	sub.w	r0, r0, r8
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d9e7      	bls.n	8001a54 <HAL_RCC_OscConfig+0x274>
 8001a84:	e711      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4c1d      	ldr	r4, [pc, #116]	; (8001afc <HAL_RCC_OscConfig+0x31c>)
 8001a88:	69e3      	ldr	r3, [r4, #28]
 8001a8a:	00d9      	lsls	r1, r3, #3
 8001a8c:	d434      	bmi.n	8001af8 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	69e3      	ldr	r3, [r4, #28]
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61e3      	str	r3, [r4, #28]
 8001a96:	69e3      	ldr	r3, [r4, #28]
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001aa0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa2:	4f18      	ldr	r7, [pc, #96]	; (8001b04 <HAL_RCC_OscConfig+0x324>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	05da      	lsls	r2, r3, #23
 8001aa8:	d52e      	bpl.n	8001b08 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aaa:	68eb      	ldr	r3, [r5, #12]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d13c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x34a>
 8001ab0:	6a23      	ldr	r3, [r4, #32]
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f950 	bl	8000d5c <HAL_GetTick>
 8001abc:	2702      	movs	r7, #2
 8001abe:	4682      	mov	sl, r0
 8001ac0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac2:	f04f 0801 	mov.w	r8, #1
 8001ac6:	fa97 f3a7 	rbit	r3, r7
 8001aca:	fa97 f3a7 	rbit	r3, r7
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d06b      	beq.n	8001baa <HAL_RCC_OscConfig+0x3ca>
 8001ad2:	6a22      	ldr	r2, [r4, #32]
 8001ad4:	fa99 f3a9 	rbit	r3, r9
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa08 f303 	lsl.w	r3, r8, r3
 8001ae4:	4213      	tst	r3, r2
 8001ae6:	d057      	beq.n	8001b98 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8001ae8:	2e00      	cmp	r6, #0
 8001aea:	f43f ae8b 	beq.w	8001804 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aee:	69e3      	ldr	r3, [r4, #28]
 8001af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af4:	61e3      	str	r3, [r4, #28]
 8001af6:	e685      	b.n	8001804 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001af8:	2600      	movs	r6, #0
 8001afa:	e7d2      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2c2>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	10908120 	.word	0x10908120
 8001b04:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001b10:	f7ff f924 	bl	8000d5c <HAL_GetTick>
 8001b14:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	05db      	lsls	r3, r3, #23
 8001b1a:	d4c6      	bmi.n	8001aaa <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1c:	f7ff f91e 	bl	8000d5c <HAL_GetTick>
 8001b20:	eba0 0008 	sub.w	r0, r0, r8
 8001b24:	2864      	cmp	r0, #100	; 0x64
 8001b26:	d9f6      	bls.n	8001b16 <HAL_RCC_OscConfig+0x336>
 8001b28:	e6bf      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2a:	bb3b      	cbnz	r3, 8001b7c <HAL_RCC_OscConfig+0x39c>
 8001b2c:	6a23      	ldr	r3, [r4, #32]
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	6223      	str	r3, [r4, #32]
 8001b34:	6a23      	ldr	r3, [r4, #32]
 8001b36:	f023 0304 	bic.w	r3, r3, #4
 8001b3a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f90e 	bl	8000d5c <HAL_GetTick>
 8001b40:	2702      	movs	r7, #2
 8001b42:	4682      	mov	sl, r0
 8001b44:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b46:	f04f 0801 	mov.w	r8, #1
 8001b4a:	fa97 f3a7 	rbit	r3, r7
 8001b4e:	fa97 f3a7 	rbit	r3, r7
 8001b52:	b373      	cbz	r3, 8001bb2 <HAL_RCC_OscConfig+0x3d2>
 8001b54:	6a22      	ldr	r2, [r4, #32]
 8001b56:	fa99 f3a9 	rbit	r3, r9
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	fa08 f303 	lsl.w	r3, r8, r3
 8001b66:	4213      	tst	r3, r2
 8001b68:	d0be      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f8f7 	bl	8000d5c <HAL_GetTick>
 8001b6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b72:	eba0 000a 	sub.w	r0, r0, sl
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d9e7      	bls.n	8001b4a <HAL_RCC_OscConfig+0x36a>
 8001b7a:	e696      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	6a23      	ldr	r3, [r4, #32]
 8001b80:	d103      	bne.n	8001b8a <HAL_RCC_OscConfig+0x3aa>
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6223      	str	r3, [r4, #32]
 8001b88:	e792      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2d0>
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6223      	str	r3, [r4, #32]
 8001b90:	6a23      	ldr	r3, [r4, #32]
 8001b92:	f023 0304 	bic.w	r3, r3, #4
 8001b96:	e78e      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f8e0 	bl	8000d5c <HAL_GetTick>
 8001b9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ba0:	eba0 000a 	sub.w	r0, r0, sl
 8001ba4:	4298      	cmp	r0, r3
 8001ba6:	d98e      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x2e6>
 8001ba8:	e67f      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
 8001baa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bb0:	e790      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2f4>
 8001bb2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bb8:	e7cd      	b.n	8001b56 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bba:	4c41      	ldr	r4, [pc, #260]	; (8001cc0 <HAL_RCC_OscConfig+0x4e0>)
 8001bbc:	6863      	ldr	r3, [r4, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	f43f ae45 	beq.w	8001852 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc8:	2a02      	cmp	r2, #2
 8001bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bce:	d152      	bne.n	8001c76 <HAL_RCC_OscConfig+0x496>
 8001bd0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001be6:	f7ff f8b9 	bl	8000d5c <HAL_GetTick>
 8001bea:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001bee:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	2601      	movs	r6, #1
 8001bf2:	fa97 f3a7 	rbit	r3, r7
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	fa97 f3a7 	rbit	r3, r7
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	fa06 f303 	lsl.w	r3, r6, r3
 8001c08:	4213      	tst	r3, r2
 8001c0a:	d12d      	bne.n	8001c68 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	6862      	ldr	r2, [r4, #4]
 8001c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001c10:	6a29      	ldr	r1, [r5, #32]
 8001c12:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c16:	430b      	orrs	r3, r1
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	6063      	str	r3, [r4, #4]
 8001c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c20:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001c36:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001c38:	f7ff f890 	bl	8000d5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001c3e:	4607      	mov	r7, r0
 8001c40:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c44:	6822      	ldr	r2, [r4, #0]
 8001c46:	fa95 f3a5 	rbit	r3, r5
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	fa06 f303 	lsl.w	r3, r6, r3
 8001c56:	4213      	tst	r3, r2
 8001c58:	f47f add8 	bne.w	800180c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f87e 	bl	8000d5c <HAL_GetTick>
 8001c60:	1bc0      	subs	r0, r0, r7
 8001c62:	2802      	cmp	r0, #2
 8001c64:	d9ec      	bls.n	8001c40 <HAL_RCC_OscConfig+0x460>
 8001c66:	e620      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c68:	f7ff f878 	bl	8000d5c <HAL_GetTick>
 8001c6c:	eba0 0008 	sub.w	r0, r0, r8
 8001c70:	2802      	cmp	r0, #2
 8001c72:	d9be      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x412>
 8001c74:	e619      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
 8001c76:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f866 	bl	8000d5c <HAL_GetTick>
 8001c90:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001c94:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	2601      	movs	r6, #1
 8001c98:	fa95 f3a5 	rbit	r3, r5
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	fa95 f3a5 	rbit	r3, r5
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	fa06 f303 	lsl.w	r3, r6, r3
 8001cae:	4213      	tst	r3, r2
 8001cb0:	f43f adac 	beq.w	800180c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f852 	bl	8000d5c <HAL_GetTick>
 8001cb8:	1bc0      	subs	r0, r0, r7
 8001cba:	2802      	cmp	r0, #2
 8001cbc:	d9ec      	bls.n	8001c98 <HAL_RCC_OscConfig+0x4b8>
 8001cbe:	e5f4      	b.n	80018aa <HAL_RCC_OscConfig+0xca>
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001cc6:	4c13      	ldr	r4, [pc, #76]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x50>)
 8001cc8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cca:	f001 030c 	and.w	r3, r1, #12
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d11e      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x4c>
 8001cd2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001cd6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001cda:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ce8:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa92 f2a2 	rbit	r2, r2
 8001cf2:	fab2 f282 	clz	r2, r2
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	40d3      	lsrs	r3, r2
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x58>)
 8001cfe:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d00:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001d02:	bf4a      	itet	mi
 8001d04:	4b06      	ldrmi	r3, [pc, #24]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001d06:	4b07      	ldrpl	r3, [pc, #28]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001d08:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001d0c:	4358      	muls	r0, r3
 8001d0e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08002c68 	.word	0x08002c68
 8001d1c:	08002c78 	.word	0x08002c78
 8001d20:	007a1200 	.word	0x007a1200
 8001d24:	003d0900 	.word	0x003d0900

08001d28 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d28:	4a5c      	ldr	r2, [pc, #368]	; (8001e9c <HAL_RCC_ClockConfig+0x174>)
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	428b      	cmp	r3, r1
{
 8001d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d36:	4606      	mov	r6, r0
 8001d38:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d3a:	d330      	bcc.n	8001d9e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	6832      	ldr	r2, [r6, #0]
 8001d3e:	0791      	lsls	r1, r2, #30
 8001d40:	d43a      	bmi.n	8001db8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	07d2      	lsls	r2, r2, #31
 8001d44:	d440      	bmi.n	8001dc8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d46:	4a55      	ldr	r2, [pc, #340]	; (8001e9c <HAL_RCC_ClockConfig+0x174>)
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	429d      	cmp	r5, r3
 8001d50:	f0c0 8092 	bcc.w	8001e78 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	6832      	ldr	r2, [r6, #0]
 8001d56:	4c52      	ldr	r4, [pc, #328]	; (8001ea0 <HAL_RCC_ClockConfig+0x178>)
 8001d58:	f012 0f04 	tst.w	r2, #4
 8001d5c:	f040 8097 	bne.w	8001e8e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	0713      	lsls	r3, r2, #28
 8001d62:	d506      	bpl.n	8001d72 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d64:	6863      	ldr	r3, [r4, #4]
 8001d66:	6932      	ldr	r2, [r6, #16]
 8001d68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d70:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d72:	f7ff ffa7 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001d76:	6863      	ldr	r3, [r4, #4]
 8001d78:	22f0      	movs	r2, #240	; 0xf0
 8001d7a:	fa92 f2a2 	rbit	r2, r2
 8001d7e:	fab2 f282 	clz	r2, r2
 8001d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d86:	40d3      	lsrs	r3, r2
 8001d88:	4a46      	ldr	r2, [pc, #280]	; (8001ea4 <HAL_RCC_ClockConfig+0x17c>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	40d8      	lsrs	r0, r3
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_RCC_ClockConfig+0x180>)
 8001d90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7fe ffa0 	bl	8000cd8 <HAL_InitTick>
  return HAL_OK;
 8001d98:	2000      	movs	r0, #0
}
 8001d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	f023 0307 	bic.w	r3, r3, #7
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001da8:	6813      	ldr	r3, [r2, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	4299      	cmp	r1, r3
 8001db0:	d0c4      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
 8001db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4939      	ldr	r1, [pc, #228]	; (8001ea0 <HAL_RCC_ClockConfig+0x178>)
 8001dba:	68b0      	ldr	r0, [r6, #8]
 8001dbc:	684b      	ldr	r3, [r1, #4]
 8001dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc2:	4303      	orrs	r3, r0
 8001dc4:	604b      	str	r3, [r1, #4]
 8001dc6:	e7bc      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc8:	6872      	ldr	r2, [r6, #4]
 8001dca:	4c35      	ldr	r4, [pc, #212]	; (8001ea0 <HAL_RCC_ClockConfig+0x178>)
 8001dcc:	2a01      	cmp	r2, #1
 8001dce:	d128      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xfa>
 8001dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd8:	6821      	ldr	r1, [r4, #0]
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	d0e1      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	6863      	ldr	r3, [r4, #4]
 8001df0:	f023 0303 	bic.w	r3, r3, #3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001df8:	f7fe ffb0 	bl	8000d5c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	6873      	ldr	r3, [r6, #4]
 8001dfe:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001e00:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e02:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	d11f      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d099      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e12:	f7fe ffa3 	bl	8000d5c <HAL_GetTick>
 8001e16:	1bc0      	subs	r0, r0, r7
 8001e18:	4540      	cmp	r0, r8
 8001e1a:	d9f5      	bls.n	8001e08 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	2a02      	cmp	r2, #2
 8001e24:	bf0c      	ite	eq
 8001e26:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001e2a:	2302      	movne	r3, #2
 8001e2c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4203      	tst	r3, r0
 8001e46:	e7d1      	b.n	8001dec <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d110      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	6863      	ldr	r3, [r4, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	f43f af77 	beq.w	8001d46 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7fe ff80 	bl	8000d5c <HAL_GetTick>
 8001e5c:	1bc0      	subs	r0, r0, r7
 8001e5e:	4540      	cmp	r0, r8
 8001e60:	d9f4      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x124>
 8001e62:	e7db      	b.n	8001e1c <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe ff7a 	bl	8000d5c <HAL_GetTick>
 8001e68:	1bc0      	subs	r0, r0, r7
 8001e6a:	4540      	cmp	r0, r8
 8001e6c:	d8d6      	bhi.n	8001e1c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6e:	6863      	ldr	r3, [r4, #4]
 8001e70:	f013 0f0c 	tst.w	r3, #12
 8001e74:	d1f6      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x13c>
 8001e76:	e766      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	432b      	orrs	r3, r5
 8001e80:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	429d      	cmp	r5, r3
 8001e8a:	d192      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
 8001e8c:	e762      	b.n	8001d54 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8e:	6863      	ldr	r3, [r4, #4]
 8001e90:	68f1      	ldr	r1, [r6, #12]
 8001e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e96:	430b      	orrs	r3, r1
 8001e98:	6063      	str	r3, [r4, #4]
 8001e9a:	e761      	b.n	8001d60 <HAL_RCC_ClockConfig+0x38>
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08002c58 	.word	0x08002c58
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001eac:	4b01      	ldr	r3, [pc, #4]	; (8001eb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eb8:	6803      	ldr	r3, [r0, #0]
{
 8001eba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ebe:	03dd      	lsls	r5, r3, #15
{
 8001ec0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ec2:	d522      	bpl.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x52>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec4:	4d72      	ldr	r5, [pc, #456]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ec6:	69eb      	ldr	r3, [r5, #28]
 8001ec8:	00d8      	lsls	r0, r3, #3
 8001eca:	f100 8085 	bmi.w	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	69eb      	ldr	r3, [r5, #28]
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61eb      	str	r3, [r5, #28]
 8001ed6:	69eb      	ldr	r3, [r5, #28]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ee0:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee2:	4f6c      	ldr	r7, [pc, #432]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	05d9      	lsls	r1, r3, #23
 8001ee8:	d578      	bpl.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x124>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eea:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ef0:	f040 8089 	bne.w	8002006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ef4:	6a2b      	ldr	r3, [r5, #32]
 8001ef6:	6862      	ldr	r2, [r4, #4]
 8001ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001efc:	4313      	orrs	r3, r2
 8001efe:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f00:	b11e      	cbz	r6, 8001f0a <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	69eb      	ldr	r3, [r5, #28]
 8001f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f08:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	07c5      	lsls	r5, r0, #31
 8001f0e:	d506      	bpl.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f10:	4a5f      	ldr	r2, [pc, #380]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f12:	68a1      	ldr	r1, [r4, #8]
 8001f14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f16:	f023 0303 	bic.w	r3, r3, #3
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f1e:	0681      	lsls	r1, r0, #26
 8001f20:	d506      	bpl.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f22:	4a5b      	ldr	r2, [pc, #364]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f24:	68e1      	ldr	r1, [r4, #12]
 8001f26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f28:	f023 0310 	bic.w	r3, r3, #16
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f30:	0382      	lsls	r2, r0, #14
 8001f32:	d506      	bpl.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001f34:	4a56      	ldr	r2, [pc, #344]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001f38:	6853      	ldr	r3, [r2, #4]
 8001f3a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f42:	0643      	lsls	r3, r0, #25
 8001f44:	d506      	bpl.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f46:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f48:	6921      	ldr	r1, [r4, #16]
 8001f4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f4c:	f023 0320 	bic.w	r3, r3, #32
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f54:	0407      	lsls	r7, r0, #16
 8001f56:	d506      	bpl.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f58:	4a4d      	ldr	r2, [pc, #308]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f5a:	6961      	ldr	r1, [r4, #20]
 8001f5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f62:	430b      	orrs	r3, r1
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f66:	0586      	lsls	r6, r0, #22
 8001f68:	d506      	bpl.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f6a:	4a49      	ldr	r2, [pc, #292]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f6c:	69e1      	ldr	r1, [r4, #28]
 8001f6e:	6853      	ldr	r3, [r2, #4]
 8001f70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8001f78:	0605      	lsls	r5, r0, #24
 8001f7a:	d506      	bpl.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8001f7c:	4a44      	ldr	r2, [pc, #272]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f7e:	69a1      	ldr	r1, [r4, #24]
 8001f80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f82:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001f86:	430b      	orrs	r3, r1
 8001f88:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f8a:	04c1      	lsls	r1, r0, #19
 8001f8c:	d506      	bpl.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f8e:	4a40      	ldr	r2, [pc, #256]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f90:	6a21      	ldr	r1, [r4, #32]
 8001f92:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f9c:	0342      	lsls	r2, r0, #13
 8001f9e:	d506      	bpl.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fa2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001fa4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001faa:	430b      	orrs	r3, r1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001fae:	0303      	lsls	r3, r0, #12
 8001fb0:	d506      	bpl.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001fb2:	4a37      	ldr	r2, [pc, #220]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fb4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001fb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001fc0:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8001fc4:	d01c      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001fc6:	4a32      	ldr	r2, [pc, #200]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001fca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	e013      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x148>
    FlagStatus       pwrclkchanged = RESET;
 8001fd8:	2600      	movs	r6, #0
 8001fda:	e782      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001fe4:	f7fe feba 	bl	8000d5c <HAL_GetTick>
 8001fe8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	05da      	lsls	r2, r3, #23
 8001fee:	f53f af7c 	bmi.w	8001eea <HAL_RCCEx_PeriphCLKConfig+0x32>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7fe feb3 	bl	8000d5c <HAL_GetTick>
 8001ff6:	eba0 0008 	sub.w	r0, r0, r8
 8001ffa:	2864      	cmp	r0, #100	; 0x64
 8001ffc:	d9f5      	bls.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x132>
          return HAL_TIMEOUT;
 8001ffe:	2003      	movs	r0, #3
}
 8002000:	b002      	add	sp, #8
 8002002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002006:	6862      	ldr	r2, [r4, #4]
 8002008:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800200c:	4293      	cmp	r3, r2
 800200e:	f43f af71 	beq.w	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002012:	6a29      	ldr	r1, [r5, #32]
 8002014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002018:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800201c:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002020:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002098 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8002024:	fab2 f282 	clz	r2, r2
 8002028:	4472      	add	r2, lr
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	2701      	movs	r7, #1
 800202e:	6017      	str	r7, [r2, #0]
 8002030:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	4473      	add	r3, lr
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002040:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8002042:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002044:	f57f af56 	bpl.w	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 8002048:	f7fe fe88 	bl	8000d5c <HAL_GetTick>
 800204c:	f04f 0802 	mov.w	r8, #2
 8002050:	4682      	mov	sl, r0
 8002052:	46c1      	mov	r9, r8
 8002054:	fa98 f3a8 	rbit	r3, r8
 8002058:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	b1a3      	cbz	r3, 8002088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800205e:	6a2a      	ldr	r2, [r5, #32]
 8002060:	fa99 f3a9 	rbit	r3, r9
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa07 f303 	lsl.w	r3, r7, r3
 8002070:	4213      	tst	r3, r2
 8002072:	f47f af3f 	bne.w	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe fe71 	bl	8000d5c <HAL_GetTick>
 800207a:	f241 3388 	movw	r3, #5000	; 0x1388
 800207e:	eba0 000a 	sub.w	r0, r0, sl
 8002082:	4298      	cmp	r0, r3
 8002084:	d9e6      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002086:	e7ba      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x146>
 8002088:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800208e:	e7e7      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	10908100 	.word	0x10908100

0800209c <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800209c:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800209e:	2302      	movs	r3, #2
 80020a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020ac:	2301      	movs	r3, #1
 80020ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 80020b2:	2000      	movs	r0, #0
 80020b4:	4770      	bx	lr

080020b6 <HAL_TIM_IC_MspInit>:
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_ReadCapturedValue>:
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
  uint32_t tmpreg = 0U;
  
  __HAL_LOCK(htim);
 80020b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d01c      	beq.n	80020fa <HAL_TIM_ReadCapturedValue+0x42>
  
  switch (Channel)
 80020c0:	290c      	cmp	r1, #12
 80020c2:	d818      	bhi.n	80020f6 <HAL_TIM_ReadCapturedValue+0x3e>
 80020c4:	e8df f001 	tbb	[pc, r1]
 80020c8:	17171707 	.word	0x17171707
 80020cc:	1717170e 	.word	0x1717170e
 80020d0:	17171711 	.word	0x17171711
 80020d4:	14          	.byte	0x14
 80020d5:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      
      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80020d6:	6803      	ldr	r3, [r0, #0]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    
  default:
    break;  
  }
     
  __HAL_UNLOCK(htim);  
 80020da:	2200      	movs	r2, #0
 80020dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  return tmpreg;
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 80020e4:	6803      	ldr	r3, [r0, #0]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 80020e8:	e7f7      	b.n	80020da <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR3;
 80020ea:	6803      	ldr	r3, [r0, #0]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 80020ee:	e7f4      	b.n	80020da <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 80020f0:	6803      	ldr	r3, [r0, #0]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 80020f4:	e7f1      	b.n	80020da <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e7ef      	b.n	80020da <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 80020fa:	2302      	movs	r3, #2
 80020fc:	e7f0      	b.n	80020e0 <HAL_TIM_ReadCapturedValue+0x28>

080020fe <HAL_TIM_OC_DelayElapsedCallback>:
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_TriggerCallback>:
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002104:	6803      	ldr	r3, [r0, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	0791      	lsls	r1, r2, #30
{
 800210a:	b510      	push	{r4, lr}
 800210c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800210e:	d50f      	bpl.n	8002130 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	0792      	lsls	r2, r2, #30
 8002114:	d50c      	bpl.n	8002130 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002116:	f06f 0202 	mvn.w	r2, #2
 800211a:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800211c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002120:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002122:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002124:	f000 8085 	beq.w	8002232 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002128:	f7fe f87e 	bl	8000228 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212c:	2300      	movs	r3, #0
 800212e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	0752      	lsls	r2, r2, #29
 8002136:	d510      	bpl.n	800215a <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	0750      	lsls	r0, r2, #29
 800213c:	d50d      	bpl.n	800215a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800213e:	f06f 0204 	mvn.w	r2, #4
 8002142:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002144:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002146:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002148:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002150:	d075      	beq.n	800223e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	f7fe f869 	bl	8000228 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	2300      	movs	r3, #0
 8002158:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	0711      	lsls	r1, r2, #28
 8002160:	d50f      	bpl.n	8002182 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	0712      	lsls	r2, r2, #28
 8002166:	d50c      	bpl.n	8002182 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002168:	f06f 0208 	mvn.w	r2, #8
 800216c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800216e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002170:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002172:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002174:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002178:	d067      	beq.n	800224a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	f7fe f855 	bl	8000228 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	2300      	movs	r3, #0
 8002180:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	06d0      	lsls	r0, r2, #27
 8002188:	d510      	bpl.n	80021ac <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	06d1      	lsls	r1, r2, #27
 800218e:	d50d      	bpl.n	80021ac <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002190:	f06f 0210 	mvn.w	r2, #16
 8002194:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002196:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002198:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800219a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80021a0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a2:	d058      	beq.n	8002256 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80021a4:	f7fe f840 	bl	8000228 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a8:	2300      	movs	r3, #0
 80021aa:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	07d2      	lsls	r2, r2, #31
 80021b2:	d508      	bpl.n	80021c6 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	07d0      	lsls	r0, r2, #31
 80021b8:	d505      	bpl.n	80021c6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021ba:	f06f 0201 	mvn.w	r2, #1
 80021be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7fe f8b5 	bl	8000330 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	0611      	lsls	r1, r2, #24
 80021cc:	d508      	bpl.n	80021e0 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	0612      	lsls	r2, r2, #24
 80021d2:	d505      	bpl.n	80021e0 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021da:	4620      	mov	r0, r4
 80021dc:	f000 fccf 	bl	8002b7e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	05d0      	lsls	r0, r2, #23
 80021e6:	d508      	bpl.n	80021fa <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	0611      	lsls	r1, r2, #24
 80021ec:	d505      	bpl.n	80021fa <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80021f4:	4620      	mov	r0, r4
 80021f6:	f000 fcc3 	bl	8002b80 <HAL_TIMEx_Break2Callback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	0652      	lsls	r2, r2, #25
 8002200:	d508      	bpl.n	8002214 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	0650      	lsls	r0, r2, #25
 8002206:	d505      	bpl.n	8002214 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800220c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800220e:	4620      	mov	r0, r4
 8002210:	f7ff ff77 	bl	8002102 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	0691      	lsls	r1, r2, #26
 800221a:	d522      	bpl.n	8002262 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	0692      	lsls	r2, r2, #26
 8002220:	d51f      	bpl.n	8002262 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002222:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002226:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002228:	611a      	str	r2, [r3, #16]
}
 800222a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800222e:	f000 bca5 	b.w	8002b7c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	f7ff ff64 	bl	80020fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ff62 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
 800223c:	e776      	b.n	800212c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	f7ff ff5e 	bl	80020fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff ff5c 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
 8002248:	e785      	b.n	8002156 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	f7ff ff58 	bl	80020fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ff56 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
 8002254:	e793      	b.n	800217e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	f7ff ff52 	bl	80020fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff ff50 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
 8002260:	e7a2      	b.n	80021a8 <HAL_TIM_IRQHandler+0xa4>
 8002262:	bd10      	pop	{r4, pc}

08002264 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002264:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8002266:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002268:	4290      	cmp	r0, r2
{
 800226a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800226c:	d002      	beq.n	8002274 <TIM_Base_SetConfig+0x10>
 800226e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002272:	d109      	bne.n	8002288 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002274:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227a:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800227c:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002280:	d00d      	beq.n	800229e <TIM_Base_SetConfig+0x3a>
 8002282:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002286:	d00a      	beq.n	800229e <TIM_Base_SetConfig+0x3a>
 8002288:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <TIM_Base_SetConfig+0x80>)
 800228a:	4290      	cmp	r0, r2
 800228c:	d007      	beq.n	800229e <TIM_Base_SetConfig+0x3a>
 800228e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002292:	4290      	cmp	r0, r2
 8002294:	d003      	beq.n	800229e <TIM_Base_SetConfig+0x3a>
 8002296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800229a:	4290      	cmp	r0, r2
 800229c:	d103      	bne.n	80022a6 <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022a4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a6:	694a      	ldr	r2, [r1, #20]
 80022a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80022ae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b0:	688b      	ldr	r3, [r1, #8]
 80022b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80022b4:	680b      	ldr	r3, [r1, #0]
 80022b6:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <TIM_Base_SetConfig+0x7c>)
 80022ba:	4298      	cmp	r0, r3
 80022bc:	d00b      	beq.n	80022d6 <TIM_Base_SetConfig+0x72>
 80022be:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d007      	beq.n	80022d6 <TIM_Base_SetConfig+0x72>
 80022c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ca:	4298      	cmp	r0, r3
 80022cc:	d003      	beq.n	80022d6 <TIM_Base_SetConfig+0x72>
 80022ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d2:	4298      	cmp	r0, r3
 80022d4:	d101      	bne.n	80022da <TIM_Base_SetConfig+0x76>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d6:	690b      	ldr	r3, [r1, #16]
 80022d8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80022da:	2301      	movs	r3, #1
 80022dc:	6143      	str	r3, [r0, #20]
 80022de:	bd10      	pop	{r4, pc}
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40014000 	.word	0x40014000

080022e8 <HAL_TIM_Base_Init>:
{ 
 80022e8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022ea:	4604      	mov	r4, r0
 80022ec:	b1a0      	cbz	r0, 8002318 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022f6:	b91b      	cbnz	r3, 8002300 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022fc:	f7fe fbac 	bl	8000a58 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002300:	2302      	movs	r3, #2
 8002302:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002306:	6820      	ldr	r0, [r4, #0]
 8002308:	1d21      	adds	r1, r4, #4
 800230a:	f7ff ffab 	bl	8002264 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800230e:	2301      	movs	r3, #1
 8002310:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002314:	2000      	movs	r0, #0
 8002316:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002318:	2001      	movs	r0, #1
}
 800231a:	bd10      	pop	{r4, pc}

0800231c <HAL_TIM_PWM_Init>:
{
 800231c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800231e:	4604      	mov	r4, r0
 8002320:	b1a0      	cbz	r0, 800234c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002322:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002326:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800232a:	b91b      	cbnz	r3, 8002334 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800232c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002330:	f7fe fc1e 	bl	8000b70 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002334:	2302      	movs	r3, #2
 8002336:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800233a:	6820      	ldr	r0, [r4, #0]
 800233c:	1d21      	adds	r1, r4, #4
 800233e:	f7ff ff91 	bl	8002264 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002342:	2301      	movs	r3, #1
 8002344:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002348:	2000      	movs	r0, #0
 800234a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800234c:	2001      	movs	r0, #1
}
 800234e:	bd10      	pop	{r4, pc}

08002350 <HAL_TIM_IC_Init>:
{
 8002350:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002352:	4604      	mov	r4, r0
 8002354:	b1a0      	cbz	r0, 8002380 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002356:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800235a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800235e:	b91b      	cbnz	r3, 8002368 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002360:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002364:	f7ff fea7 	bl	80020b6 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 8002368:	2302      	movs	r3, #2
 800236a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800236e:	6820      	ldr	r0, [r4, #0]
 8002370:	1d21      	adds	r1, r4, #4
 8002372:	f7ff ff77 	bl	8002264 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002376:	2301      	movs	r3, #1
 8002378:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800237c:	2000      	movs	r0, #0
 800237e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002380:	2001      	movs	r0, #1
}
 8002382:	bd10      	pop	{r4, pc}

08002384 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002384:	6a03      	ldr	r3, [r0, #32]
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238c:	6a03      	ldr	r3, [r0, #32]
{
 800238e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002390:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002392:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002394:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002396:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800239a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800239e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023a0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80023a2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80023a6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023a8:	4d17      	ldr	r5, [pc, #92]	; (8002408 <TIM_OC1_SetConfig+0x84>)
 80023aa:	42a8      	cmp	r0, r5
 80023ac:	d00b      	beq.n	80023c6 <TIM_OC1_SetConfig+0x42>
 80023ae:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80023b2:	42a8      	cmp	r0, r5
 80023b4:	d007      	beq.n	80023c6 <TIM_OC1_SetConfig+0x42>
 80023b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023ba:	42a8      	cmp	r0, r5
 80023bc:	d003      	beq.n	80023c6 <TIM_OC1_SetConfig+0x42>
 80023be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023c2:	42a8      	cmp	r0, r5
 80023c4:	d11a      	bne.n	80023fc <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023c6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80023c8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80023cc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023ce:	4d0e      	ldr	r5, [pc, #56]	; (8002408 <TIM_OC1_SetConfig+0x84>)
 80023d0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80023d2:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023d6:	d00b      	beq.n	80023f0 <TIM_OC1_SetConfig+0x6c>
 80023d8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80023dc:	42a8      	cmp	r0, r5
 80023de:	d007      	beq.n	80023f0 <TIM_OC1_SetConfig+0x6c>
 80023e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023e4:	42a8      	cmp	r0, r5
 80023e6:	d003      	beq.n	80023f0 <TIM_OC1_SetConfig+0x6c>
 80023e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023ec:	42a8      	cmp	r0, r5
 80023ee:	d105      	bne.n	80023fc <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023f0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023f4:	698e      	ldr	r6, [r1, #24]
 80023f6:	694c      	ldr	r4, [r1, #20]
 80023f8:	4334      	orrs	r4, r6
 80023fa:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023fc:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023fe:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002400:	684a      	ldr	r2, [r1, #4]
 8002402:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002404:	6203      	str	r3, [r0, #32]
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	40012c00 	.word	0x40012c00

0800240c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240c:	6a03      	ldr	r3, [r0, #32]
 800240e:	f023 0310 	bic.w	r3, r3, #16
 8002412:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002414:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002416:	6842      	ldr	r2, [r0, #4]
{
 8002418:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800241a:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800241c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800241e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002422:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002426:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800242a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800242c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002430:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002434:	4d10      	ldr	r5, [pc, #64]	; (8002478 <TIM_OC2_SetConfig+0x6c>)
 8002436:	42a8      	cmp	r0, r5
 8002438:	d10e      	bne.n	8002458 <TIM_OC2_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800243a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800243c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002440:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002448:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800244a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800244c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002450:	4335      	orrs	r5, r6
 8002452:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002456:	e009      	b.n	800246c <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002458:	4d08      	ldr	r5, [pc, #32]	; (800247c <TIM_OC2_SetConfig+0x70>)
 800245a:	42a8      	cmp	r0, r5
 800245c:	d0f4      	beq.n	8002448 <TIM_OC2_SetConfig+0x3c>
 800245e:	4d08      	ldr	r5, [pc, #32]	; (8002480 <TIM_OC2_SetConfig+0x74>)
 8002460:	42a8      	cmp	r0, r5
 8002462:	d0f1      	beq.n	8002448 <TIM_OC2_SetConfig+0x3c>
 8002464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002468:	42a8      	cmp	r0, r5
 800246a:	d0ed      	beq.n	8002448 <TIM_OC2_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800246c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800246e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002470:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002472:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002474:	6203      	str	r3, [r0, #32]
}
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40014000 	.word	0x40014000
 8002480:	40014400 	.word	0x40014400

08002484 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002484:	6a03      	ldr	r3, [r0, #32]
 8002486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800248a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800248e:	6842      	ldr	r2, [r0, #4]
{
 8002490:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002492:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002494:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002496:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800249a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800249e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024a0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80024a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024aa:	4d11      	ldr	r5, [pc, #68]	; (80024f0 <TIM_OC3_SetConfig+0x6c>)
 80024ac:	42a8      	cmp	r0, r5
 80024ae:	d10e      	bne.n	80024ce <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80024b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024be:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024c0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024c2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024c6:	4335      	orrs	r5, r6
 80024c8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80024cc:	e009      	b.n	80024e2 <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024ce:	4d09      	ldr	r5, [pc, #36]	; (80024f4 <TIM_OC3_SetConfig+0x70>)
 80024d0:	42a8      	cmp	r0, r5
 80024d2:	d0f4      	beq.n	80024be <TIM_OC3_SetConfig+0x3a>
 80024d4:	4d08      	ldr	r5, [pc, #32]	; (80024f8 <TIM_OC3_SetConfig+0x74>)
 80024d6:	42a8      	cmp	r0, r5
 80024d8:	d0f1      	beq.n	80024be <TIM_OC3_SetConfig+0x3a>
 80024da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024de:	42a8      	cmp	r0, r5
 80024e0:	d0ed      	beq.n	80024be <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024e4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80024e6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80024e8:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80024ea:	6203      	str	r3, [r0, #32]
}
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40014000 	.word	0x40014000
 80024f8:	40014400 	.word	0x40014400

080024fc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024fc:	6a03      	ldr	r3, [r0, #32]
 80024fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002502:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002504:	6a02      	ldr	r2, [r0, #32]
{
 8002506:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002508:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800250a:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800250c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800250e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002512:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002516:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800251a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800251c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002520:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002524:	4d0c      	ldr	r5, [pc, #48]	; (8002558 <TIM_OC4_SetConfig+0x5c>)
 8002526:	42a8      	cmp	r0, r5
 8002528:	d00b      	beq.n	8002542 <TIM_OC4_SetConfig+0x46>
 800252a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800252e:	42a8      	cmp	r0, r5
 8002530:	d007      	beq.n	8002542 <TIM_OC4_SetConfig+0x46>
 8002532:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002536:	42a8      	cmp	r0, r5
 8002538:	d003      	beq.n	8002542 <TIM_OC4_SetConfig+0x46>
 800253a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800253e:	42a8      	cmp	r0, r5
 8002540:	d104      	bne.n	800254c <TIM_OC4_SetConfig+0x50>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002542:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002544:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002548:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800254e:	61c3      	str	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002550:	684b      	ldr	r3, [r1, #4]
 8002552:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002554:	6202      	str	r2, [r0, #32]
 8002556:	bd30      	pop	{r4, r5, pc}
 8002558:	40012c00 	.word	0x40012c00

0800255c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800255c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800255e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002560:	4e10      	ldr	r6, [pc, #64]	; (80025a4 <TIM_TI1_SetConfig+0x48>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002562:	f024 0401 	bic.w	r4, r4, #1
 8002566:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002568:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800256a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800256c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800256e:	d006      	beq.n	800257e <TIM_TI1_SetConfig+0x22>
 8002570:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002574:	d003      	beq.n	800257e <TIM_TI1_SetConfig+0x22>
 8002576:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 800257a:	42b0      	cmp	r0, r6
 800257c:	d10f      	bne.n	800259e <TIM_TI1_SetConfig+0x42>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800257e:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002582:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002584:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002586:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800258a:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800258c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002590:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002594:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002596:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002598:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800259a:	6205      	str	r5, [r0, #32]
}
 800259c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800259e:	f044 0201 	orr.w	r2, r4, #1
 80025a2:	e7ef      	b.n	8002584 <TIM_TI1_SetConfig+0x28>
 80025a4:	40012c00 	.word	0x40012c00

080025a8 <HAL_TIM_IC_ConfigChannel>:
{
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80025aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025ae:	2b01      	cmp	r3, #1
{
 80025b0:	4604      	mov	r4, r0
 80025b2:	460d      	mov	r5, r1
 80025b4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80025b8:	d019      	beq.n	80025ee <HAL_TIM_IC_ConfigChannel+0x46>
 80025ba:	2301      	movs	r3, #1
 80025bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 80025c4:	b9a2      	cbnz	r2, 80025f0 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 80025c6:	68cb      	ldr	r3, [r1, #12]
 80025c8:	6820      	ldr	r0, [r4, #0]
 80025ca:	c906      	ldmia	r1, {r1, r2}
 80025cc:	f7ff ffc6 	bl	800255c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025d0:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025d2:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	f022 020c 	bic.w	r2, r2, #12
 80025da:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	430a      	orrs	r2, r1
 80025e0:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80025e4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80025ea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80025ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80025f0:	2a04      	cmp	r2, #4
 80025f2:	688e      	ldr	r6, [r1, #8]
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	68e8      	ldr	r0, [r5, #12]
 80025f8:	c982      	ldmia	r1, {r1, r7}
 80025fa:	d11f      	bne.n	800263c <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	f022 0210 	bic.w	r2, r2, #16
 8002602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002604:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002606:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002608:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800260c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002610:	0300      	lsls	r0, r0, #12
 8002612:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002614:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002618:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800261a:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800261c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002620:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002624:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002628:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002630:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002638:	619e      	str	r6, [r3, #24]
 800263a:	e7d2      	b.n	80025e2 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 800263c:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800263e:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002640:	d11c      	bne.n	800267c <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002646:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002648:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 800264a:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800264c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8002650:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002652:	0100      	lsls	r0, r0, #4
 8002654:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002656:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800265a:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800265c:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800265e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002662:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002666:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002668:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800266a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	f022 020c 	bic.w	r2, r2, #12
 8002672:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002678:	61de      	str	r6, [r3, #28]
 800267a:	e7b2      	b.n	80025e2 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800267c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002680:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002682:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8002684:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002686:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800268a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800268e:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002690:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002694:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002696:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002698:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800269a:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800269e:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80026a2:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026a4:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80026a6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026ae:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026b0:	69da      	ldr	r2, [r3, #28]
 80026b2:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80026b6:	e7df      	b.n	8002678 <HAL_TIM_IC_ConfigChannel+0xd0>

080026b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026b8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80026ba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026bc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026be:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80026c6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c8:	6083      	str	r3, [r0, #8]
 80026ca:	bd10      	pop	{r4, pc}

080026cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80026cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
{
 80026d2:	b570      	push	{r4, r5, r6, lr}
 80026d4:	4604      	mov	r4, r0
 80026d6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80026da:	d01a      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80026e0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80026e2:	2301      	movs	r3, #1
 80026e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80026e8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ea:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_TIM_ConfigClockSource+0x168>)
 80026ec:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80026ee:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80026f0:	680b      	ldr	r3, [r1, #0]
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d075      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x116>
 80026f6:	d818      	bhi.n	800272a <HAL_TIM_ConfigClockSource+0x5e>
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	f000 808f 	beq.w	800281c <HAL_TIM_ConfigClockSource+0x150>
 80026fe:	d809      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x48>
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8085 	beq.w	8002810 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8002706:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002708:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800270a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800270e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002712:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002714:	2b20      	cmp	r3, #32
 8002716:	f000 8087 	beq.w	8002828 <HAL_TIM_ConfigClockSource+0x15c>
 800271a:	2b30      	cmp	r3, #48	; 0x30
 800271c:	d1f3      	bne.n	8002706 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800271e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002724:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002728:	e033      	b.n	8002792 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800272a:	2b70      	cmp	r3, #112	; 0x70
 800272c:	d033      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0xca>
 800272e:	d81b      	bhi.n	8002768 <HAL_TIM_ConfigClockSource+0x9c>
 8002730:	2b50      	cmp	r3, #80	; 0x50
 8002732:	d03f      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0xe8>
 8002734:	2b60      	cmp	r3, #96	; 0x60
 8002736:	d1e6      	bne.n	8002706 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002738:	684d      	ldr	r5, [r1, #4]
 800273a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800273c:	6a01      	ldr	r1, [r0, #32]
 800273e:	f021 0110 	bic.w	r1, r1, #16
 8002742:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002744:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002746:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002748:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800274c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002750:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002754:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002758:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800275a:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800275c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002762:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002766:	e014      	b.n	8002792 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_ConfigClockSource+0xbc>
 800276e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002772:	d1c8      	bne.n	8002706 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002774:	68cb      	ldr	r3, [r1, #12]
 8002776:	684a      	ldr	r2, [r1, #4]
 8002778:	6889      	ldr	r1, [r1, #8]
 800277a:	f7ff ff9d 	bl	80026b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800277e:	6822      	ldr	r2, [r4, #0]
 8002780:	6893      	ldr	r3, [r2, #8]
 8002782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002786:	e013      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002788:	6883      	ldr	r3, [r0, #8]
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002792:	6083      	str	r3, [r0, #8]
 8002794:	e7b7      	b.n	8002706 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002796:	68cb      	ldr	r3, [r1, #12]
 8002798:	684a      	ldr	r2, [r1, #4]
 800279a:	6889      	ldr	r1, [r1, #8]
 800279c:	f7ff ff8c 	bl	80026b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027a0:	6822      	ldr	r2, [r4, #0]
 80027a2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b0:	6093      	str	r3, [r2, #8]
    break;
 80027b2:	e7a8      	b.n	8002706 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80027b4:	684a      	ldr	r2, [r1, #4]
 80027b6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027b8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ba:	6a05      	ldr	r5, [r0, #32]
 80027bc:	f025 0501 	bic.w	r5, r5, #1
 80027c0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80027c2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027c4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027cc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80027d0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80027d2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80027d4:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80027d6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027dc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80027e0:	e7d7      	b.n	8002792 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80027e2:	684a      	ldr	r2, [r1, #4]
 80027e4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027e6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027e8:	6a05      	ldr	r5, [r0, #32]
 80027ea:	f025 0501 	bic.w	r5, r5, #1
 80027ee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80027f0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027f2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027fa:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80027fe:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002800:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002802:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002804:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800280a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800280e:	e7c0      	b.n	8002792 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002810:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002816:	f043 0307 	orr.w	r3, r3, #7
 800281a:	e7ba      	b.n	8002792 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800281c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002822:	f043 0317 	orr.w	r3, r3, #23
 8002826:	e7b4      	b.n	8002792 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002828:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800282e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002832:	e7ae      	b.n	8002792 <HAL_TIM_ConfigClockSource+0xc6>
 8002834:	fffe0088 	.word	0xfffe0088

08002838 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002838:	6a03      	ldr	r3, [r0, #32]
{
 800283a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800283c:	2401      	movs	r4, #1
 800283e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002840:	ea23 0304 	bic.w	r3, r3, r4
 8002844:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002846:	6a03      	ldr	r3, [r0, #32]
 8002848:	408a      	lsls	r2, r1
 800284a:	431a      	orrs	r2, r3
 800284c:	6202      	str	r2, [r0, #32]
 800284e:	bd10      	pop	{r4, pc}

08002850 <HAL_TIM_PWM_Start>:
{
 8002850:	b510      	push	{r4, lr}
 8002852:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002854:	2201      	movs	r2, #1
 8002856:	6800      	ldr	r0, [r0, #0]
 8002858:	f7ff ffee 	bl	8002838 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <HAL_TIM_PWM_Start+0x40>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00b      	beq.n	800287c <HAL_TIM_PWM_Start+0x2c>
 8002864:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002868:	4293      	cmp	r3, r2
 800286a:	d007      	beq.n	800287c <HAL_TIM_PWM_Start+0x2c>
 800286c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <HAL_TIM_PWM_Start+0x2c>
 8002874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 800287c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
} 
 800288c:	2000      	movs	r0, #0
 800288e:	bd10      	pop	{r4, pc}
 8002890:	40012c00 	.word	0x40012c00

08002894 <HAL_TIM_IC_Start_IT>:
{
 8002894:	b510      	push	{r4, lr}
 8002896:	4604      	mov	r4, r0
  switch (Channel)
 8002898:	290c      	cmp	r1, #12
 800289a:	d80d      	bhi.n	80028b8 <HAL_TIM_IC_Start_IT+0x24>
 800289c:	e8df f001 	tbb	[pc, r1]
 80028a0:	0c0c0c07 	.word	0x0c0c0c07
 80028a4:	0c0c0c17 	.word	0x0c0c0c17
 80028a8:	0c0c0c1c 	.word	0x0c0c0c1c
 80028ac:	21          	.byte	0x21
 80028ad:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028ae:	6802      	ldr	r2, [r0, #0]
 80028b0:	68d3      	ldr	r3, [r2, #12]
 80028b2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028b6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028b8:	6820      	ldr	r0, [r4, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f7ff ffbc 	bl	8002838 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6013      	str	r3, [r2, #0]
} 
 80028ca:	2000      	movs	r0, #0
 80028cc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028ce:	6802      	ldr	r2, [r0, #0]
 80028d0:	68d3      	ldr	r3, [r2, #12]
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	e7ee      	b.n	80028b6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80028d8:	6802      	ldr	r2, [r0, #0]
 80028da:	68d3      	ldr	r3, [r2, #12]
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	e7e9      	b.n	80028b6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028e2:	6802      	ldr	r2, [r0, #0]
 80028e4:	68d3      	ldr	r3, [r2, #12]
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	e7e4      	b.n	80028b6 <HAL_TIM_IC_Start_IT+0x22>

080028ec <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028ec:	6a03      	ldr	r3, [r0, #32]
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f4:	6a02      	ldr	r2, [r0, #32]
{
 80028f6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80028f8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028fa:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002906:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002908:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800290a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800290e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002912:	4d0d      	ldr	r5, [pc, #52]	; (8002948 <TIM_OC5_SetConfig+0x5c>)
 8002914:	42a8      	cmp	r0, r5
 8002916:	d00b      	beq.n	8002930 <TIM_OC5_SetConfig+0x44>
 8002918:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800291c:	42a8      	cmp	r0, r5
 800291e:	d007      	beq.n	8002930 <TIM_OC5_SetConfig+0x44>
 8002920:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002924:	42a8      	cmp	r0, r5
 8002926:	d003      	beq.n	8002930 <TIM_OC5_SetConfig+0x44>
 8002928:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800292c:	42a8      	cmp	r0, r5
 800292e:	d104      	bne.n	800293a <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002930:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002932:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002936:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800293c:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800293e:	684b      	ldr	r3, [r1, #4]
 8002940:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002942:	6202      	str	r2, [r0, #32]
 8002944:	bd30      	pop	{r4, r5, pc}
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00

0800294c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800294c:	6a03      	ldr	r3, [r0, #32]
 800294e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002952:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002954:	6a02      	ldr	r2, [r0, #32]
{
 8002956:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002958:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800295a:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800295c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800295e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002966:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800296a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800296c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002970:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002974:	4d0c      	ldr	r5, [pc, #48]	; (80029a8 <TIM_OC6_SetConfig+0x5c>)
 8002976:	42a8      	cmp	r0, r5
 8002978:	d00b      	beq.n	8002992 <TIM_OC6_SetConfig+0x46>
 800297a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800297e:	42a8      	cmp	r0, r5
 8002980:	d007      	beq.n	8002992 <TIM_OC6_SetConfig+0x46>
 8002982:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002986:	42a8      	cmp	r0, r5
 8002988:	d003      	beq.n	8002992 <TIM_OC6_SetConfig+0x46>
 800298a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800298e:	42a8      	cmp	r0, r5
 8002990:	d104      	bne.n	800299c <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002992:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002994:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002998:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800299c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800299e:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80029a0:	684b      	ldr	r3, [r1, #4]
 80029a2:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80029a4:	6202      	str	r2, [r0, #32]
 80029a6:	bd30      	pop	{r4, r5, pc}
 80029a8:	40012c00 	.word	0x40012c00

080029ac <HAL_TIM_PWM_ConfigChannel>:
{
 80029ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80029ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029b2:	2b01      	cmp	r3, #1
{
 80029b4:	4604      	mov	r4, r0
 80029b6:	460d      	mov	r5, r1
 80029b8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80029bc:	d010      	beq.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80029be:	2301      	movs	r3, #1
  switch (Channel)
 80029c0:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80029c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80029c6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80029ca:	d043      	beq.n	8002a54 <HAL_TIM_PWM_ConfigChannel+0xa8>
 80029cc:	d809      	bhi.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x36>
 80029ce:	b1fa      	cbz	r2, 8002a10 <HAL_TIM_PWM_ConfigChannel+0x64>
 80029d0:	2a04      	cmp	r2, #4
 80029d2:	d02e      	beq.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80029d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80029dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80029e0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80029e2:	2a10      	cmp	r2, #16
 80029e4:	d047      	beq.n	8002a76 <HAL_TIM_PWM_ConfigChannel+0xca>
 80029e6:	2a14      	cmp	r2, #20
 80029e8:	d056      	beq.n	8002a98 <HAL_TIM_PWM_ConfigChannel+0xec>
 80029ea:	2a0c      	cmp	r2, #12
 80029ec:	d1f2      	bne.n	80029d4 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ee:	6820      	ldr	r0, [r4, #0]
 80029f0:	f7ff fd84 	bl	80024fc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80029f6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a0e:	e030      	b.n	8002a72 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	f7ff fcb7 	bl	8002384 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a16:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a18:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	f042 0208 	orr.w	r2, r2, #8
 8002a20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	f022 0204 	bic.w	r2, r2, #4
 8002a28:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a2a:	699a      	ldr	r2, [r3, #24]
 8002a2c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a2e:	619a      	str	r2, [r3, #24]
    break;
 8002a30:	e7d0      	b.n	80029d4 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a32:	6820      	ldr	r0, [r4, #0]
 8002a34:	f7ff fcea 	bl	800240c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a38:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a3a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a52:	e7ec      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a54:	6820      	ldr	r0, [r4, #0]
 8002a56:	f7ff fd15 	bl	8002484 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002a5c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	f042 0208 	orr.w	r2, r2, #8
 8002a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002a72:	61da      	str	r2, [r3, #28]
    break;
 8002a74:	e7ae      	b.n	80029d4 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	f7ff ff38 	bl	80028ec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a7c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002a7e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a82:	f042 0208 	orr.w	r2, r2, #8
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a92:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8002a96:	e79d      	b.n	80029d4 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a98:	6820      	ldr	r0, [r4, #0]
 8002a9a:	f7ff ff57 	bl	800294c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a9e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002aa0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002aa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002aaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002ab2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ab4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ab8:	e7ec      	b.n	8002a94 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08002abc <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002abc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
{
 8002ac2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002ac4:	d018      	beq.n	8002af8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8002ac6:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ac8:	4d0c      	ldr	r5, [pc, #48]	; (8002afc <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8002aca:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002acc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ace:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ad0:	bf02      	ittt	eq
 8002ad2:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ad4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ad8:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ada:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002adc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8002ae8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aea:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8002aec:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002aee:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002af0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002af8:	2002      	movs	r0, #2
} 
 8002afa:	bd30      	pop	{r4, r5, pc}
 8002afc:	40012c00 	.word	0x40012c00

08002b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8002b00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
{
 8002b06:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002b08:	d034      	beq.n	8002b74 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b0a:	68cb      	ldr	r3, [r1, #12]
 8002b0c:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002b0e:	4c1a      	ldr	r4, [pc, #104]	; (8002b78 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b16:	684a      	ldr	r2, [r1, #4]
 8002b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b1e:	680a      	ldr	r2, [r1, #0]
 8002b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b26:	690a      	ldr	r2, [r1, #16]
 8002b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b2e:	694a      	ldr	r2, [r1, #20]
 8002b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b36:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002b3e:	698a      	ldr	r2, [r1, #24]
 8002b40:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002b48:	6802      	ldr	r2, [r0, #0]
 8002b4a:	42a2      	cmp	r2, r4
 8002b4c:	d10c      	bne.n	8002b68 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002b4e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002b50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b54:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002b58:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002b5a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b60:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002b62:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002b66:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002b74:	2002      	movs	r0, #2
}
 8002b76:	bd10      	pop	{r4, pc}
 8002b78:	40012c00 	.word	0x40012c00

08002b7c <HAL_TIMEx_CommutationCallback>:
 8002b7c:	4770      	bx	lr

08002b7e <HAL_TIMEx_BreakCallback>:
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIMEx_Break2Callback>:
{
 8002b80:	4770      	bx	lr
	...

08002b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b8a:	e003      	b.n	8002b94 <LoopCopyDataInit>

08002b8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b92:	3104      	adds	r1, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b94:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b9c:	d3f6      	bcc.n	8002b8c <CopyDataInit>
	ldr	r2, =_sbss
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ba0:	e002      	b.n	8002ba8 <LoopFillZerobss>

08002ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ba2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ba4:	f842 3b04 	str.w	r3, [r2], #4

08002ba8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <LoopForever+0x16>)
	cmp	r2, r3
 8002baa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002bac:	d3f9      	bcc.n	8002ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bae:	f7fe f85f 	bl	8000c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb2:	f000 f811 	bl	8002bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bb6:	f7fd fc9d 	bl	80004f4 <main>

08002bba <LoopForever>:

LoopForever:
    b LoopForever
 8002bba:	e7fe      	b.n	8002bba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bbc:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8002bc0:	08002c90 	.word	0x08002c90
	ldr	r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bc8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002bcc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002bd0:	2000024c 	.word	0x2000024c

08002bd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bd4:	e7fe      	b.n	8002bd4 <ADC1_IRQHandler>
	...

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	4e0d      	ldr	r6, [pc, #52]	; (8002c10 <__libc_init_array+0x38>)
 8002bdc:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <__libc_init_array+0x3c>)
 8002bde:	1ba4      	subs	r4, r4, r6
 8002be0:	10a4      	asrs	r4, r4, #2
 8002be2:	2500      	movs	r5, #0
 8002be4:	42a5      	cmp	r5, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	4e0b      	ldr	r6, [pc, #44]	; (8002c18 <__libc_init_array+0x40>)
 8002bea:	4c0c      	ldr	r4, [pc, #48]	; (8002c1c <__libc_init_array+0x44>)
 8002bec:	f000 f818 	bl	8002c20 <_init>
 8002bf0:	1ba4      	subs	r4, r4, r6
 8002bf2:	10a4      	asrs	r4, r4, #2
 8002bf4:	2500      	movs	r5, #0
 8002bf6:	42a5      	cmp	r5, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c00:	4798      	blx	r3
 8002c02:	3501      	adds	r5, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c0a:	4798      	blx	r3
 8002c0c:	3501      	adds	r5, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	08002c88 	.word	0x08002c88
 8002c14:	08002c88 	.word	0x08002c88
 8002c18:	08002c88 	.word	0x08002c88
 8002c1c:	08002c8c 	.word	0x08002c8c

08002c20 <_init>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr

08002c2c <_fini>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr
